{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b02d551c",
   "metadata": {},
   "source": [
    "# CS 7641 - HW1 Supervised Learning (Hotel)\n",
    "\n",
    "Decision Trees. For the decision tree, you should implement or steal a decision tree algorithm (and by \"implement or steal\" I mean \"steal\"). Be sure to use some form of pruning. You are not required to use information gain (for example, there is something called the GINI index that is sometimes used) to split attributes, but you should describe whatever it is that you do use.\n",
    "\n",
    "Neural Networks. For the neural network you should implement or steal your favorite kind of network and training algorithm. You may use networks of nodes with as many layers as you like and any activation function you see fit.\n",
    "\n",
    "Boosting. Implement or steal a boosted version of your decision trees. As before, you will want to use some form of pruning, but presumably because you're using boosting you can afford to be much more aggressive about your pruning.\n",
    "\n",
    "Support Vector Machines. You should implement (for sufficiently loose definitions of implement including \"download\") SVMs. This should be done in such a way that you can swap out kernel functions. I'd like to see at least two.\n",
    "\n",
    "k-Nearest Neighbors. You should \"implement\" (the quotes mean I don't mean it: steal the code) kNN. Use different values of k."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "585b0c6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import learning_curve\n",
    "from sklearn.model_selection import validation_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score,recall_score\n",
    "\n",
    "import time\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c9d5518",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Code Snippet From Sklearn Tutorial : https://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py\n",
    "\n",
    "def plot_learning_curve(\n",
    "    estimator,\n",
    "    title,\n",
    "    X,\n",
    "    y,\n",
    "    axes=None,\n",
    "    ylim=None,\n",
    "    cv=None,\n",
    "    n_jobs=None,\n",
    "    scoring=None,\n",
    "    train_sizes=np.linspace(0.1, 1.0, 5),\n",
    "):\n",
    "    \"\"\"\n",
    "    Generate 3 plots: the test and training learning curve, the training\n",
    "    samples vs fit times curve, the fit times vs score curve.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    estimator : estimator instance\n",
    "        An estimator instance implementing `fit` and `predict` methods which\n",
    "        will be cloned for each validation.\n",
    "\n",
    "    title : str\n",
    "        Title for the chart.\n",
    "\n",
    "    X : array-like of shape (n_samples, n_features)\n",
    "        Training vector, where ``n_samples`` is the number of samples and\n",
    "        ``n_features`` is the number of features.\n",
    "\n",
    "    y : array-like of shape (n_samples) or (n_samples, n_features)\n",
    "        Target relative to ``X`` for classification or regression;\n",
    "        None for unsupervised learning.\n",
    "\n",
    "    axes : array-like of shape (3,), default=None\n",
    "        Axes to use for plotting the curves.\n",
    "\n",
    "    ylim : tuple of shape (2,), default=None\n",
    "        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n",
    "\n",
    "    cv : int, cross-validation generator or an iterable, default=None\n",
    "        Determines the cross-validation splitting strategy.\n",
    "        Possible inputs for cv are:\n",
    "\n",
    "          - None, to use the default 5-fold cross-validation,\n",
    "          - integer, to specify the number of folds.\n",
    "          - :term:`CV splitter`,\n",
    "          - An iterable yielding (train, test) splits as arrays of indices.\n",
    "\n",
    "        For integer/None inputs, if ``y`` is binary or multiclass,\n",
    "        :class:`StratifiedKFold` used. If the estimator is not a classifier\n",
    "        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n",
    "\n",
    "        Refer :ref:`User Guide <cross_validation>` for the various\n",
    "        cross-validators that can be used here.\n",
    "\n",
    "    n_jobs : int or None, default=None\n",
    "        Number of jobs to run in parallel.\n",
    "        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n",
    "        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n",
    "        for more details.\n",
    "\n",
    "    scoring : str or callable, default=None\n",
    "        A str (see model evaluation documentation) or\n",
    "        a scorer callable object / function with signature\n",
    "        ``scorer(estimator, X, y)``.\n",
    "\n",
    "    train_sizes : array-like of shape (n_ticks,)\n",
    "        Relative or absolute numbers of training examples that will be used to\n",
    "        generate the learning curve. If the ``dtype`` is float, it is regarded\n",
    "        as a fraction of the maximum size of the training set (that is\n",
    "        determined by the selected validation method), i.e. it has to be within\n",
    "        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n",
    "        sets. Note that for classification the number of samples usually have\n",
    "        to be big enough to contain at least one sample from each class.\n",
    "        (default: np.linspace(0.1, 1.0, 5))\n",
    "    \"\"\"\n",
    "    if axes is None:\n",
    "        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
    "\n",
    "    axes[0].set_title(title)\n",
    "    if ylim is not None:\n",
    "        axes[0].set_ylim(*ylim)\n",
    "    axes[0].set_xlabel(\"Training examples\")\n",
    "    axes[0].set_ylabel(\"Score\")\n",
    "\n",
    "    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n",
    "        estimator,\n",
    "        X,\n",
    "        y,\n",
    "        scoring=scoring,\n",
    "        cv=cv,\n",
    "        n_jobs=n_jobs,\n",
    "        train_sizes=train_sizes,\n",
    "        return_times=True,\n",
    "    )\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "    fit_times_mean = np.mean(fit_times, axis=1)\n",
    "    fit_times_std = np.std(fit_times, axis=1)\n",
    "\n",
    "    # Plot learning curve\n",
    "    axes[0].grid()\n",
    "    axes[0].fill_between(\n",
    "        train_sizes,\n",
    "        train_scores_mean - train_scores_std,\n",
    "        train_scores_mean + train_scores_std,\n",
    "        alpha=0.1,\n",
    "        color=\"r\",\n",
    "    )\n",
    "    axes[0].fill_between(\n",
    "        train_sizes,\n",
    "        test_scores_mean - test_scores_std,\n",
    "        test_scores_mean + test_scores_std,\n",
    "        alpha=0.1,\n",
    "        color=\"g\",\n",
    "    )\n",
    "    axes[0].plot(\n",
    "        train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\"\n",
    "    )\n",
    "    axes[0].plot(\n",
    "        train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\"\n",
    "    )\n",
    "    axes[0].legend(loc=\"best\")\n",
    "\n",
    "    # Plot n_samples vs fit_times\n",
    "    axes[1].grid()\n",
    "    axes[1].plot(train_sizes, fit_times_mean, \"o-\")\n",
    "    axes[1].fill_between(\n",
    "        train_sizes,\n",
    "        fit_times_mean - fit_times_std,\n",
    "        fit_times_mean + fit_times_std,\n",
    "        alpha=0.1,\n",
    "    )\n",
    "    axes[1].set_xlabel(\"Training examples\")\n",
    "    axes[1].set_ylabel(\"fit_times\")\n",
    "    axes[1].set_title(\"Scalability of the model\")\n",
    "\n",
    "    # Plot fit_time vs score\n",
    "    fit_time_argsort = fit_times_mean.argsort()\n",
    "    fit_time_sorted = fit_times_mean[fit_time_argsort]\n",
    "    test_scores_mean_sorted = test_scores_mean[fit_time_argsort]\n",
    "    test_scores_std_sorted = test_scores_std[fit_time_argsort]\n",
    "    axes[2].grid()\n",
    "    axes[2].plot(fit_time_sorted, test_scores_mean_sorted, \"o-\")\n",
    "    axes[2].fill_between(\n",
    "        fit_time_sorted,\n",
    "        test_scores_mean_sorted - test_scores_std_sorted,\n",
    "        test_scores_mean_sorted + test_scores_std_sorted,\n",
    "        alpha=0.1,\n",
    "    )\n",
    "    axes[2].set_xlabel(\"fit_times\")\n",
    "    axes[2].set_ylabel(\"Score\")\n",
    "    axes[2].set_title(\"Performance of the model\")\n",
    "\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8059742b",
   "metadata": {},
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "860ba804",
   "metadata": {},
   "outputs": [],
   "source": [
    "hotel = pd.read_csv('Data/HotelBooking.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "195d7530",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 119390 entries, 0 to 119389\n",
      "Data columns (total 36 columns):\n",
      " #   Column                          Non-Null Count   Dtype  \n",
      "---  ------                          --------------   -----  \n",
      " 0   hotel                           119390 non-null  object \n",
      " 1   is_canceled                     119390 non-null  int64  \n",
      " 2   lead_time                       119390 non-null  int64  \n",
      " 3   arrival_date_year               119390 non-null  int64  \n",
      " 4   arrival_date_month              119390 non-null  object \n",
      " 5   arrival_date_week_number        119390 non-null  int64  \n",
      " 6   arrival_date_day_of_month       119390 non-null  int64  \n",
      " 7   stays_in_weekend_nights         119390 non-null  int64  \n",
      " 8   stays_in_week_nights            119390 non-null  int64  \n",
      " 9   adults                          119390 non-null  int64  \n",
      " 10  children                        119386 non-null  float64\n",
      " 11  babies                          119390 non-null  int64  \n",
      " 12  meal                            119390 non-null  object \n",
      " 13  country                         118902 non-null  object \n",
      " 14  market_segment                  119390 non-null  object \n",
      " 15  distribution_channel            119390 non-null  object \n",
      " 16  is_repeated_guest               119390 non-null  int64  \n",
      " 17  previous_cancellations          119390 non-null  int64  \n",
      " 18  previous_bookings_not_canceled  119390 non-null  int64  \n",
      " 19  reserved_room_type              119390 non-null  object \n",
      " 20  assigned_room_type              119390 non-null  object \n",
      " 21  booking_changes                 119390 non-null  int64  \n",
      " 22  deposit_type                    119390 non-null  object \n",
      " 23  agent                           103050 non-null  float64\n",
      " 24  company                         6797 non-null    float64\n",
      " 25  days_in_waiting_list            119390 non-null  int64  \n",
      " 26  customer_type                   119390 non-null  object \n",
      " 27  adr                             119390 non-null  float64\n",
      " 28  required_car_parking_spaces     119390 non-null  int64  \n",
      " 29  total_of_special_requests       119390 non-null  int64  \n",
      " 30  reservation_status              119390 non-null  object \n",
      " 31  reservation_status_date         119390 non-null  object \n",
      " 32  name                            119390 non-null  object \n",
      " 33  email                           119390 non-null  object \n",
      " 34  phone-number                    119390 non-null  object \n",
      " 35  credit_card                     119390 non-null  object \n",
      "dtypes: float64(4), int64(16), object(16)\n",
      "memory usage: 32.8+ MB\n"
     ]
    }
   ],
   "source": [
    "hotel.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "7ad473b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>hotel</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>Resort Hotel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_canceled</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lead_time</th>\n",
       "      <td>342</td>\n",
       "      <td>737</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_year</th>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_month</th>\n",
       "      <td>July</td>\n",
       "      <td>July</td>\n",
       "      <td>July</td>\n",
       "      <td>July</td>\n",
       "      <td>July</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>adults</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>children</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>babies</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meal</th>\n",
       "      <td>BB</td>\n",
       "      <td>BB</td>\n",
       "      <td>BB</td>\n",
       "      <td>BB</td>\n",
       "      <td>BB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <td>PRT</td>\n",
       "      <td>PRT</td>\n",
       "      <td>GBR</td>\n",
       "      <td>GBR</td>\n",
       "      <td>GBR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>market_segment</th>\n",
       "      <td>Direct</td>\n",
       "      <td>Direct</td>\n",
       "      <td>Direct</td>\n",
       "      <td>Corporate</td>\n",
       "      <td>Online TA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distribution_channel</th>\n",
       "      <td>Direct</td>\n",
       "      <td>Direct</td>\n",
       "      <td>Direct</td>\n",
       "      <td>Corporate</td>\n",
       "      <td>TA/TO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_repeated_guest</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous_cancellations</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous_bookings_not_canceled</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reserved_room_type</th>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assigned_room_type</th>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>booking_changes</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>deposit_type</th>\n",
       "      <td>No Deposit</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>No Deposit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>agent</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>304.0</td>\n",
       "      <td>240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>company</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>days_in_waiting_list</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_type</th>\n",
       "      <td>Transient</td>\n",
       "      <td>Transient</td>\n",
       "      <td>Transient</td>\n",
       "      <td>Transient</td>\n",
       "      <td>Transient</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>adr</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reservation_status</th>\n",
       "      <td>Check-Out</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>Check-Out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reservation_status_date</th>\n",
       "      <td>2015-07-01</td>\n",
       "      <td>2015-07-01</td>\n",
       "      <td>2015-07-02</td>\n",
       "      <td>2015-07-02</td>\n",
       "      <td>2015-07-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Ernest Barnes</td>\n",
       "      <td>Andrea Baker</td>\n",
       "      <td>Rebecca Parker</td>\n",
       "      <td>Laura Murray</td>\n",
       "      <td>Linda Hines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>email</th>\n",
       "      <td>Ernest.Barnes31@outlook.com</td>\n",
       "      <td>Andrea_Baker94@aol.com</td>\n",
       "      <td>Rebecca_Parker@comcast.net</td>\n",
       "      <td>Laura_M@gmail.com</td>\n",
       "      <td>LHines@verizon.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>phone-number</th>\n",
       "      <td>669-792-1661</td>\n",
       "      <td>858-637-6955</td>\n",
       "      <td>652-885-2745</td>\n",
       "      <td>364-656-8427</td>\n",
       "      <td>713-226-5883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>credit_card</th>\n",
       "      <td>************4322</td>\n",
       "      <td>************9157</td>\n",
       "      <td>************3734</td>\n",
       "      <td>************5677</td>\n",
       "      <td>************5498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          0  \\\n",
       "hotel                                          Resort Hotel   \n",
       "is_canceled                                               0   \n",
       "lead_time                                               342   \n",
       "arrival_date_year                                      2015   \n",
       "arrival_date_month                                     July   \n",
       "arrival_date_week_number                                 27   \n",
       "arrival_date_day_of_month                                 1   \n",
       "stays_in_weekend_nights                                   0   \n",
       "stays_in_week_nights                                      0   \n",
       "adults                                                    2   \n",
       "children                                                0.0   \n",
       "babies                                                    0   \n",
       "meal                                                     BB   \n",
       "country                                                 PRT   \n",
       "market_segment                                       Direct   \n",
       "distribution_channel                                 Direct   \n",
       "is_repeated_guest                                         0   \n",
       "previous_cancellations                                    0   \n",
       "previous_bookings_not_canceled                            0   \n",
       "reserved_room_type                                        C   \n",
       "assigned_room_type                                        C   \n",
       "booking_changes                                           3   \n",
       "deposit_type                                     No Deposit   \n",
       "agent                                                   NaN   \n",
       "company                                                 NaN   \n",
       "days_in_waiting_list                                      0   \n",
       "customer_type                                     Transient   \n",
       "adr                                                     0.0   \n",
       "required_car_parking_spaces                               0   \n",
       "total_of_special_requests                                 0   \n",
       "reservation_status                                Check-Out   \n",
       "reservation_status_date                          2015-07-01   \n",
       "name                                          Ernest Barnes   \n",
       "email                           Ernest.Barnes31@outlook.com   \n",
       "phone-number                                   669-792-1661   \n",
       "credit_card                                ************4322   \n",
       "\n",
       "                                                     1  \\\n",
       "hotel                                     Resort Hotel   \n",
       "is_canceled                                          0   \n",
       "lead_time                                          737   \n",
       "arrival_date_year                                 2015   \n",
       "arrival_date_month                                July   \n",
       "arrival_date_week_number                            27   \n",
       "arrival_date_day_of_month                            1   \n",
       "stays_in_weekend_nights                              0   \n",
       "stays_in_week_nights                                 0   \n",
       "adults                                               2   \n",
       "children                                           0.0   \n",
       "babies                                               0   \n",
       "meal                                                BB   \n",
       "country                                            PRT   \n",
       "market_segment                                  Direct   \n",
       "distribution_channel                            Direct   \n",
       "is_repeated_guest                                    0   \n",
       "previous_cancellations                               0   \n",
       "previous_bookings_not_canceled                       0   \n",
       "reserved_room_type                                   C   \n",
       "assigned_room_type                                   C   \n",
       "booking_changes                                      4   \n",
       "deposit_type                                No Deposit   \n",
       "agent                                              NaN   \n",
       "company                                            NaN   \n",
       "days_in_waiting_list                                 0   \n",
       "customer_type                                Transient   \n",
       "adr                                                0.0   \n",
       "required_car_parking_spaces                          0   \n",
       "total_of_special_requests                            0   \n",
       "reservation_status                           Check-Out   \n",
       "reservation_status_date                     2015-07-01   \n",
       "name                                      Andrea Baker   \n",
       "email                           Andrea_Baker94@aol.com   \n",
       "phone-number                              858-637-6955   \n",
       "credit_card                           ************9157   \n",
       "\n",
       "                                                         2                  3  \\\n",
       "hotel                                         Resort Hotel       Resort Hotel   \n",
       "is_canceled                                              0                  0   \n",
       "lead_time                                                7                 13   \n",
       "arrival_date_year                                     2015               2015   \n",
       "arrival_date_month                                    July               July   \n",
       "arrival_date_week_number                                27                 27   \n",
       "arrival_date_day_of_month                                1                  1   \n",
       "stays_in_weekend_nights                                  0                  0   \n",
       "stays_in_week_nights                                     1                  1   \n",
       "adults                                                   1                  1   \n",
       "children                                               0.0                0.0   \n",
       "babies                                                   0                  0   \n",
       "meal                                                    BB                 BB   \n",
       "country                                                GBR                GBR   \n",
       "market_segment                                      Direct          Corporate   \n",
       "distribution_channel                                Direct          Corporate   \n",
       "is_repeated_guest                                        0                  0   \n",
       "previous_cancellations                                   0                  0   \n",
       "previous_bookings_not_canceled                           0                  0   \n",
       "reserved_room_type                                       A                  A   \n",
       "assigned_room_type                                       C                  A   \n",
       "booking_changes                                          0                  0   \n",
       "deposit_type                                    No Deposit         No Deposit   \n",
       "agent                                                  NaN              304.0   \n",
       "company                                                NaN                NaN   \n",
       "days_in_waiting_list                                     0                  0   \n",
       "customer_type                                    Transient          Transient   \n",
       "adr                                                   75.0               75.0   \n",
       "required_car_parking_spaces                              0                  0   \n",
       "total_of_special_requests                                0                  0   \n",
       "reservation_status                               Check-Out          Check-Out   \n",
       "reservation_status_date                         2015-07-02         2015-07-02   \n",
       "name                                        Rebecca Parker       Laura Murray   \n",
       "email                           Rebecca_Parker@comcast.net  Laura_M@gmail.com   \n",
       "phone-number                                  652-885-2745       364-656-8427   \n",
       "credit_card                               ************3734   ************5677   \n",
       "\n",
       "                                                 4  \n",
       "hotel                                 Resort Hotel  \n",
       "is_canceled                                      0  \n",
       "lead_time                                       14  \n",
       "arrival_date_year                             2015  \n",
       "arrival_date_month                            July  \n",
       "arrival_date_week_number                        27  \n",
       "arrival_date_day_of_month                        1  \n",
       "stays_in_weekend_nights                          0  \n",
       "stays_in_week_nights                             2  \n",
       "adults                                           2  \n",
       "children                                       0.0  \n",
       "babies                                           0  \n",
       "meal                                            BB  \n",
       "country                                        GBR  \n",
       "market_segment                           Online TA  \n",
       "distribution_channel                         TA/TO  \n",
       "is_repeated_guest                                0  \n",
       "previous_cancellations                           0  \n",
       "previous_bookings_not_canceled                   0  \n",
       "reserved_room_type                               A  \n",
       "assigned_room_type                               A  \n",
       "booking_changes                                  0  \n",
       "deposit_type                            No Deposit  \n",
       "agent                                        240.0  \n",
       "company                                        NaN  \n",
       "days_in_waiting_list                             0  \n",
       "customer_type                            Transient  \n",
       "adr                                           98.0  \n",
       "required_car_parking_spaces                      0  \n",
       "total_of_special_requests                        1  \n",
       "reservation_status                       Check-Out  \n",
       "reservation_status_date                 2015-07-03  \n",
       "name                                   Linda Hines  \n",
       "email                           LHines@verizon.com  \n",
       "phone-number                          713-226-5883  \n",
       "credit_card                       ************5498  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel.head().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "17e91421",
   "metadata": {},
   "outputs": [],
   "source": [
    "hotel = hotel.sample(frac =.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "61b14d07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hotel</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_month</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>children</th>\n",
       "      <th>...</th>\n",
       "      <th>customer_type</th>\n",
       "      <th>adr</th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <th>reservation_status</th>\n",
       "      <th>reservation_status_date</th>\n",
       "      <th>name</th>\n",
       "      <th>email</th>\n",
       "      <th>phone-number</th>\n",
       "      <th>credit_card</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_canceled</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>...</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "      <td>14953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>...</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "      <td>8925</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             hotel  lead_time  arrival_date_year  arrival_date_month  \\\n",
       "is_canceled                                                            \n",
       "0            14953      14953              14953               14953   \n",
       "1             8925       8925               8925                8925   \n",
       "\n",
       "             arrival_date_week_number  arrival_date_day_of_month  \\\n",
       "is_canceled                                                        \n",
       "0                               14953                      14953   \n",
       "1                                8925                       8925   \n",
       "\n",
       "             stays_in_weekend_nights  stays_in_week_nights  adults  children  \\\n",
       "is_canceled                                                                    \n",
       "0                              14953                 14953   14953     14953   \n",
       "1                               8925                  8925    8925      8925   \n",
       "\n",
       "             ...  customer_type    adr  required_car_parking_spaces  \\\n",
       "is_canceled  ...                                                      \n",
       "0            ...          14953  14953                        14953   \n",
       "1            ...           8925   8925                         8925   \n",
       "\n",
       "             total_of_special_requests  reservation_status  \\\n",
       "is_canceled                                                  \n",
       "0                                14953               14953   \n",
       "1                                 8925                8925   \n",
       "\n",
       "             reservation_status_date   name  email  phone-number  credit_card  \n",
       "is_canceled                                                                    \n",
       "0                              14953  14953  14953         14953        14953  \n",
       "1                               8925   8925   8925          8925         8925  \n",
       "\n",
       "[2 rows x 35 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel.groupby('is_canceled').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e82140db",
   "metadata": {},
   "source": [
    "# Pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "674602ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hotel\n",
      "City Hotel      15874\n",
      "Resort Hotel     8004\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "arrival_date_month\n",
      "April        2253\n",
      "August       2789\n",
      "December     1325\n",
      "February     1592\n",
      "January      1210\n",
      "July         2537\n",
      "June         2177\n",
      "March        1948\n",
      "May          2350\n",
      "November     1338\n",
      "October      2244\n",
      "September    2115\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "meal\n",
      "BB           18556\n",
      "FB             159\n",
      "HB            2811\n",
      "SC            2119\n",
      "Undefined      233\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "country\n",
      "ABW      1\n",
      "AGO     77\n",
      "AIA      1\n",
      "ALB      2\n",
      "AND      2\n",
      "      ... \n",
      "URY     10\n",
      "USA    420\n",
      "VEN      3\n",
      "VNM      2\n",
      "ZAF     14\n",
      "Name: hotel, Length: 130, dtype: int64\n",
      "\n",
      "\n",
      "market_segment\n",
      "Aviation            46\n",
      "Complementary      139\n",
      "Corporate         1059\n",
      "Direct            2522\n",
      "Groups            3943\n",
      "Offline TA/TO     4888\n",
      "Online TA        11281\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "distribution_channel\n",
      "Corporate     1322\n",
      "Direct        2897\n",
      "GDS             44\n",
      "TA/TO        19614\n",
      "Undefined        1\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "reserved_room_type\n",
      "A    17204\n",
      "B      230\n",
      "C      189\n",
      "D     3870\n",
      "E     1278\n",
      "F      572\n",
      "G      418\n",
      "H      115\n",
      "L        1\n",
      "P        1\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "assigned_room_type\n",
      "A    14789\n",
      "B      445\n",
      "C      494\n",
      "D     5115\n",
      "E     1518\n",
      "F      767\n",
      "G      491\n",
      "H      143\n",
      "I       62\n",
      "K       53\n",
      "P        1\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "deposit_type\n",
      "No Deposit    20908\n",
      "Non Refund     2937\n",
      "Refundable       33\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n",
      "customer_type\n",
      "Contract             823\n",
      "Group                116\n",
      "Transient          17850\n",
      "Transient-Party     5089\n",
      "Name: hotel, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "categorical_columns = hotel.columns[hotel.dtypes == 'object'].drop(['reservation_status', 'reservation_status_date', 'name', 'email',\n",
    "       'phone-number', 'credit_card'])\n",
    "for i in categorical_columns:\n",
    "    print(hotel.groupby(i).hotel.count())\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "820d61c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['hotel', 'is_canceled', 'lead_time', 'arrival_date_year',\n",
       "       'arrival_date_month', 'arrival_date_week_number',\n",
       "       'arrival_date_day_of_month', 'stays_in_weekend_nights',\n",
       "       'stays_in_week_nights', 'adults', 'children', 'babies', 'meal',\n",
       "       'country', 'market_segment', 'distribution_channel',\n",
       "       'is_repeated_guest', 'previous_cancellations',\n",
       "       'previous_bookings_not_canceled', 'reserved_room_type',\n",
       "       'assigned_room_type', 'booking_changes', 'deposit_type',\n",
       "       'days_in_waiting_list', 'customer_type', 'adr',\n",
       "       'required_car_parking_spaces', 'total_of_special_requests'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel = (hotel.drop(['reservation_status', 'reservation_status_date', 'name', 'email','phone-number', 'credit_card','agent', 'company'], axis = 1))\n",
    "hotel.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f3e2ecfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "hotel = pd.get_dummies(hotel, columns = categorical_columns, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b27b7c58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23878"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(hotel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "8d9d5436",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel.columns[hotel.isnull().sum() > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a87ea104",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>35012</th>\n",
       "      <th>5709</th>\n",
       "      <th>51421</th>\n",
       "      <th>94198</th>\n",
       "      <th>52091</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>is_canceled</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lead_time</th>\n",
       "      <td>29.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>322.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_year</th>\n",
       "      <td>2017.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <td>15.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <td>10.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>deposit_type_Non Refund</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>deposit_type_Refundable</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_type_Group</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_type_Transient</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_type_Transient-Party</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>197 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                35012   5709    51421   94198   52091\n",
       "is_canceled                       0.0     1.0     1.0     0.0     1.0\n",
       "lead_time                        29.0    30.0   322.0   172.0    12.0\n",
       "arrival_date_year              2017.0  2016.0  2016.0  2016.0  2016.0\n",
       "arrival_date_week_number         15.0    20.0    21.0    31.0    23.0\n",
       "arrival_date_day_of_month        10.0    12.0    19.0    26.0    30.0\n",
       "...                               ...     ...     ...     ...     ...\n",
       "deposit_type_Non Refund           0.0     0.0     1.0     0.0     0.0\n",
       "deposit_type_Refundable           0.0     0.0     0.0     0.0     0.0\n",
       "customer_type_Group               0.0     0.0     0.0     0.0     0.0\n",
       "customer_type_Transient           1.0     1.0     1.0     1.0     1.0\n",
       "customer_type_Transient-Party     0.0     0.0     0.0     0.0     0.0\n",
       "\n",
       "[197 rows x 5 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel.head().transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f766654",
   "metadata": {},
   "source": [
    "# Model Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e32e1032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['is_canceled', 'lead_time', 'arrival_date_year',\n",
       "       'arrival_date_week_number', 'arrival_date_day_of_month',\n",
       "       'stays_in_weekend_nights', 'stays_in_week_nights', 'adults', 'children',\n",
       "       'babies',\n",
       "       ...\n",
       "       'assigned_room_type_G', 'assigned_room_type_H', 'assigned_room_type_I',\n",
       "       'assigned_room_type_K', 'assigned_room_type_P',\n",
       "       'deposit_type_Non Refund', 'deposit_type_Refundable',\n",
       "       'customer_type_Group', 'customer_type_Transient',\n",
       "       'customer_type_Transient-Party'],\n",
       "      dtype='object', length=197)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hotel.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "78d83494",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_cols = hotel.columns.drop('is_canceled')\n",
    "X = hotel[feature_cols]\n",
    "y = hotel.is_canceled\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab8b4683",
   "metadata": {},
   "source": [
    "# (1)  Decision Tree\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "5a7acd64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8178391959798995\n",
      "Precision: 0.7543661971830986\n",
      "Recall: 0.7552171460800903\n",
      "Time Train: 0.17593812942504883\n",
      "Time Infer: 0.0029997825622558594\n"
     ]
    }
   ],
   "source": [
    "dtree = DecisionTreeClassifier()\n",
    "\n",
    "start_time = time.time()\n",
    "dtree.fit(X_train, y_train)\n",
    "end_time = time.time()\n",
    "time_train = end_time-start_time\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "y_pred = dtree.predict(X_test)\n",
    "end_time = time.time()\n",
    "time_infer = end_time-start_time\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))\n",
    "print(\"Time Train:\", time_train)\n",
    "print(\"Time Infer:\", time_infer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "02066102",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n",
      "{'criterion': 'entropy', 'splitter': 'random'}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "ml_model = DecisionTreeClassifier()\n",
    "params = {\n",
    "    'splitter': ['best','random'],\n",
    "    'criterion': ['gini', 'entropy',],\n",
    "}\n",
    "\n",
    "clf = GridSearchCV(estimator=ml_model, param_grid=params, cv=5, n_jobs=5, verbose=1)\n",
    "\n",
    "clf.fit(X_train, y_train)\n",
    "print(clf.best_params_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "70d95227",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8209798994974874\n",
      "Precision: 0.755\n",
      "Recall: 0.766497461928934\n",
      "Time Train: 0.13398003578186035\n",
      "Time Infer: 0.0045909881591796875\n"
     ]
    }
   ],
   "source": [
    "dtree = DecisionTreeClassifier(criterion='entropy', splitter = 'random')\n",
    "\n",
    "start_time = time.time()\n",
    "dtree.fit(X_train, y_train)\n",
    "end_time = time.time()\n",
    "time_train = end_time-start_time\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "y_pred = dtree.predict(X_test)\n",
    "end_time = time.time()\n",
    "time_infer = end_time-start_time\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))\n",
    "print(\"Time Train:\", time_train)\n",
    "print(\"Time Infer:\", time_infer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "14bab780",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Source Code : https://www.geeksforgeeks.org/validation-curve/\n",
    "\n",
    "parameter_range = np.arange(1, 30, 1)\n",
    "train_score, test_score = validation_curve(DecisionTreeClassifier(criterion= 'entropy', splitter ='random'), X, y,\n",
    "                                       param_name = \"max_depth\",\n",
    "                                       param_range = parameter_range,\n",
    "                                        cv = 5, scoring = \"accuracy\")\n",
    " \n",
    "# Calculating mean and standard deviation of training score\n",
    "mean_train_score = np.mean(train_score, axis = 1)\n",
    "std_train_score = np.std(train_score, axis = 1)\n",
    " \n",
    "# Calculating mean and standard deviation of testing score\n",
    "mean_test_score = np.mean(test_score, axis = 1)\n",
    "std_test_score = np.std(test_score, axis = 1)\n",
    " \n",
    "# Plot mean accuracy scores for training and testing scores\n",
    "plt.plot(parameter_range, mean_train_score, label = \"Training Score\", color = 'b')\n",
    "plt.plot(parameter_range, mean_test_score, label = \"Cross Validation Score\", color = 'g')\n",
    " \n",
    "# Creating the plot\n",
    "plt.title(\"Validation Curve with Decision Tree Classifier\")\n",
    "plt.xlabel(\"Max Depth of the Tree\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.tight_layout()\n",
    "plt.grid()\n",
    "plt.legend(loc = 'best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "bb6f1ae2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(mean_test_score) + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "66c84f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8358458961474037\n",
      "Precision: 0.7945205479452054\n",
      "Recall: 0.7523970671178793\n",
      "Time Train: 0.19745707511901855\n",
      "Time Infer: 0.0748910903930664\n"
     ]
    }
   ],
   "source": [
    "dtree = DecisionTreeClassifier(criterion='entropy', splitter = 'random', max_depth = 15)\n",
    "\n",
    "start_time = time.time()\n",
    "dtree.fit(X_train, y_train)\n",
    "end_time = time.time()\n",
    "time_train = end_time-start_time\n",
    "\n",
    "\n",
    "start_time = time.time()\n",
    "y_pred = dtree.predict(X_test)\n",
    "end_time = time.time()\n",
    "time_infer = end_time-start_time\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))\n",
    "print(\"Time Train:\", time_train)\n",
    "print(\"Time Infer:\", time_infer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "383a40d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'matplotlib.pyplot' from '/Users/jiheekim/miniforge3/lib/python3.9/site-packages/matplotlib/pyplot.py'>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "title = \"Learning Curves\"\n",
    "# Cross validation with 5 iterations to get smoother mean test and train\n",
    "# score curves, each time with 20% data randomly selected as a validation set.\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "fig, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
    "\n",
    "estimator = DecisionTreeClassifier(criterion='entropy', splitter = 'random', max_depth = 13)\n",
    "plot_learning_curve( estimator,  title, X, y, axes=axes[ :], ylim=(0.7, 1.01), cv=cv,  n_jobs=4, scoring=\"accuracy\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccef9127",
   "metadata": {},
   "source": [
    "# (2)  Support Vector Machine\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "64c49fc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6561976549413735\n",
      "Precision: 0.6139130434782609\n",
      "Recall: 0.1990975747320925\n"
     ]
    }
   ],
   "source": [
    "clf = SVC()\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "943c2b03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n",
      "{'kernel': 'linear'}\n"
     ]
    }
   ],
   "source": [
    "ml_model = SVC()\n",
    "params = {\n",
    "    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],\n",
    "}\n",
    "\n",
    "clf = GridSearchCV(estimator=ml_model, param_grid=params, cv=5, n_jobs=5, verbose=1)\n",
    "\n",
    "clf.fit(X_train, y_train)\n",
    "print(clf.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "dd619f1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8077889447236181\n",
      "Precision: 0.8301158301158301\n",
      "Recall: 0.6063169768753525\n"
     ]
    }
   ],
   "source": [
    "clf = SVC(kernel = \"linear\")\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "00b73cec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Source Code : https://www.geeksforgeeks.org/validation-curve/\n",
    "\n",
    "parameter_range = np.arange(1, 3, 1)\n",
    "train_score, test_score = validation_curve(SVC(kernel = \"linear\"), X, y,\n",
    "                                       param_name = \"C\",\n",
    "                                       param_range = parameter_range,\n",
    "                                        cv = 5, scoring = \"accuracy\")\n",
    " \n",
    "# Calculating mean and standard deviation of training score\n",
    "mean_train_score = np.mean(train_score, axis = 1)\n",
    "std_train_score = np.std(train_score, axis = 1)\n",
    " \n",
    "# Calculating mean and standard deviation of testing score\n",
    "mean_test_score = np.mean(test_score, axis = 1)\n",
    "std_test_score = np.std(test_score, axis = 1)\n",
    " \n",
    "# Plot mean accuracy scores for training and testing scores\n",
    "plt.plot(parameter_range, mean_train_score, label = \"Training Score\", color = 'b')\n",
    "plt.plot(parameter_range, mean_test_score, label = \"Cross Validation Score\", color = 'g')\n",
    " \n",
    "# Creating the plot\n",
    "plt.title(\"Validation Curve with SVM Classifier\")\n",
    "plt.xlabel(\"C\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.tight_layout()\n",
    "plt.grid()\n",
    "plt.legend(loc = 'best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80ecaa20",
   "metadata": {},
   "outputs": [],
   "source": [
    "title = \"Learning Curves\"\n",
    "# Cross validation with 5 iterations to get smoother mean test and train\n",
    "# score curves, each time with 20% data randomly selected as a validation set.\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "fig, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
    "\n",
    "estimator = DecisionTreeClassifier()\n",
    "plot_learning_curve( estimator,  title, x, y, axes=axes[ :], ylim=(0.9, 1.01), cv=cv,  n_jobs=4, scoring=\"accuracy\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06c16181",
   "metadata": {},
   "source": [
    "# (3)  K Nearest Neighbors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "93353092",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8077889447236181\n",
      "Precision: 0.8301158301158301\n",
      "Recall: 0.6063169768753525\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier()\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "fe0ab9c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n",
      "{'weights': 'distance'}\n"
     ]
    }
   ],
   "source": [
    "ml_model = KNeighborsClassifier()\n",
    "params = {\n",
    "    'weights': ['uniform', 'distance'],\n",
    "}\n",
    "\n",
    "clf = GridSearchCV(estimator=ml_model, param_grid=params, cv=5, n_jobs=5, verbose=1)\n",
    "\n",
    "clf.fit(X_train, y_train)\n",
    "print(clf.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "1b9f95b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Source Code : https://www.geeksforgeeks.org/validation-curve/\n",
    "\n",
    "parameter_range = np.arange(1, 30, 5)\n",
    "train_score, test_score = validation_curve(KNeighborsClassifier(weights = 'distance'), X, y,\n",
    "                                       param_name = \"n_neighbors\",\n",
    "                                       param_range = parameter_range,\n",
    "                                        cv = 5, scoring = \"accuracy\")\n",
    " \n",
    "# Calculating mean and standard deviation of training score\n",
    "mean_train_score = np.mean(train_score, axis = 1)\n",
    "std_train_score = np.std(train_score, axis = 1)\n",
    " \n",
    "# Calculating mean and standard deviation of testing score\n",
    "mean_test_score = np.mean(test_score, axis = 1)\n",
    "std_test_score = np.std(test_score, axis = 1)\n",
    " \n",
    "# Plot mean accuracy scores for training and testing scores\n",
    "plt.plot(parameter_range, mean_train_score, label = \"Training Score\", color = 'b')\n",
    "plt.plot(parameter_range, mean_test_score, label = \"Cross Validation Score\", color = 'g')\n",
    " \n",
    "# Creating the plot\n",
    "plt.title(\"Validation Curve with KNN Classifier\")\n",
    "plt.xlabel(\"Number of Neighbours\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.tight_layout()\n",
    "plt.legend(loc = 'best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "d083ce8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.72824363, 0.74859716, 0.75567454, 0.7574335 , 0.75994629,\n",
       "       0.75986252])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(mean_test_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "38f5989d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7552345058626466\n",
      "Precision: 0.6780660377358491\n",
      "Recall: 0.6486181613085167\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(weights = 'distance', n_neighbors= 21)\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\",recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "a59654d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'matplotlib.pyplot' from '/Users/jiheekim/miniforge3/lib/python3.9/site-packages/matplotlib/pyplot.py'>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "title = \"Learning Curves\"\n",
    "# Cross validation with 5 iterations to get smoother mean test and train\n",
    "# score curves, each time with 20% data randomly selected as a validation set.\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "fig, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
    "\n",
    "estimator =  KNeighborsClassifier(weights = 'distance', n_neighbors= 21)\n",
    "plot_learning_curve( estimator,  title, X, y, axes=axes[ :], ylim=(0.7, 1.01), cv=cv,  n_jobs=4, scoring=\"accuracy\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "831af6ae",
   "metadata": {},
   "source": [
    "# (4)  AdaBoost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "8ee766ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8232830820770519\n",
      "Precision: 0.8111185532484929\n",
      "Recall: 0.6830231246474902\n"
     ]
    }
   ],
   "source": [
    "ada = AdaBoostClassifier()\n",
    "ada.fit(X_train, y_train)\n",
    "y_pred = ada.predict(X_test)\n",
    "\n",
    "print('Accuracy:', accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "cb2e4e55",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:615: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 598, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 443, in fit\n",
      "    return super().fit(X, y, sample_weight)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 102, in fit\n",
      "    raise ValueError(\"learning_rate must be greater than zero\")\n",
      "ValueError: learning_rate must be greater than zero\n",
      "\n",
      "  warnings.warn(\"Estimator fit failed. The score on this train-test\"\n",
      "/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:615: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 598, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 443, in fit\n",
      "    return super().fit(X, y, sample_weight)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 102, in fit\n",
      "    raise ValueError(\"learning_rate must be greater than zero\")\n",
      "ValueError: learning_rate must be greater than zero\n",
      "\n",
      "  warnings.warn(\"Estimator fit failed. The score on this train-test\"\n",
      "/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:615: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 598, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 443, in fit\n",
      "    return super().fit(X, y, sample_weight)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 102, in fit\n",
      "    raise ValueError(\"learning_rate must be greater than zero\")\n",
      "ValueError: learning_rate must be greater than zero\n",
      "\n",
      "  warnings.warn(\"Estimator fit failed. The score on this train-test\"\n",
      "/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:615: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 598, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 443, in fit\n",
      "    return super().fit(X, y, sample_weight)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 102, in fit\n",
      "    raise ValueError(\"learning_rate must be greater than zero\")\n",
      "ValueError: learning_rate must be greater than zero\n",
      "\n",
      "  warnings.warn(\"Estimator fit failed. The score on this train-test\"\n",
      "/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:615: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 598, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 443, in fit\n",
      "    return super().fit(X, y, sample_weight)\n",
      "  File \"/Users/jiheekim/miniforge3/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py\", line 102, in fit\n",
      "    raise ValueError(\"learning_rate must be greater than zero\")\n",
      "ValueError: learning_rate must be greater than zero\n",
      "\n",
      "  warnings.warn(\"Estimator fit failed. The score on this train-test\"\n"
     ]
    },
    {
     "data": {
      "image/png": "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3LhxvP7663HHTkr//v15//33adKkCSNHjoybX7hwYebPn09AQADbt28nLCyMNWvW8Nprr8WNZQVOQoj1wgsvUKdOHWbMmMGiRYvo27dvXGey1xpSpFatWhQpUoRy5crRokULOnfuTLt27QDo3bs3Tz/9NJ06deLixYvExMQwbdo01q1bx/r16zl27Bj169encePGid73Tz/9lLx587J69WouXbrEnXfeSUhISFzyM95z8SIsXgx//XVly7nYTv2zZHFaydWoAT17xt8nqljRWs5lBt5MUKuBSiJSDtgP9AR6JVhnL9AC+E1EigCVgXDXPanPgc2q+pYXY/S54ODguAvhsmXLeOSRRwCnk9cyZcqwbds27rjjDl5++WUiIiLo3LkzlSpVokaNGowYMYKnnnqKtm3b0qhRo0T7btu2LUOGDOH06dNMmTKFrl274ufnR0REBD169ODgwYNERkZe9UJ86tQpTp48SZMmTQBnaI2ff/4ZgMuXLzN06FDWrVuHn5+fR/fVli1bFjfeVfPmzTl+/Hhccr3WkCJ+fn788ssvrF69moULF/L444+zdu1annjiCfbv30+nTp0ACAgIiDtWWFgYfn5+FClShCZNmrB69Wry5Mlzxfs+b948NmzYwPfffx93ztu3b7cE5SUXLsDcuTB1KsyeHT9ia9myTpXcPfdc2XLO9XGaTMhrCUpVo0RkKDAXp5n5F6q6SUQGuZaPBV4ExovIRpwqwadU9ZiI3AX0ATaKyDrXLp9V1Tk3E9PVSjrecuutt8Zd+JLiPvRGcv0i9urVi9tvv52ffvqJ0NBQxo0bR/PmzVm7di1z5szhmWeeISQkhFGjRl2xXY4cOWjdujXTp09n0qRJvP322wA88sgjDB8+nPbt28eNxJscVU12uI23336bIkWKsH79emJiYuISw9UkdY6x+/dkSBERITg4mODgYFq1akX//v0ZPny4x8eKlfB9f//99wkNDb1m/ObGnD8Pv/ziJKUff3Q6Qy1Y0Gm00KWLU1WXO7evozTJUVXORJ7h4JmDHDp7iENnD3HwrPO6csHK9K/T3yvH9epzUK6EMifBvLFurw8AIUlst4yk72GlO82bN+fZZ5/ls88+48EHHwRg9erVnD9/PtG6jRs3ZuLEiTRv3pxt27axd+9eKleuTHh4OOXLl+fRRx8lPDycDRs2UKVKFQoU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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Source Code : https://www.geeksforgeeks.org/validation-curve/\n",
    "\n",
    "parameter_range = np.arange(0, 1, 0.2)\n",
    "train_score, test_score = validation_curve(AdaBoostClassifier(), X, y,\n",
    "                                       param_name = \"learning_rate\",\n",
    "                                       param_range = parameter_range,\n",
    "                                        cv = 5, scoring = \"accuracy\")\n",
    " \n",
    "# Calculating mean and standard deviation of training score\n",
    "mean_train_score = np.mean(train_score, axis = 1)\n",
    "std_train_score = np.std(train_score, axis = 1)\n",
    " \n",
    "# Calculating mean and standard deviation of testing score\n",
    "mean_test_score = np.mean(test_score, axis = 1)\n",
    "std_test_score = np.std(test_score, axis = 1)\n",
    " \n",
    "# Plot mean accuracy scores for training and testing scores\n",
    "plt.plot(parameter_range, mean_train_score, label = \"Training Score\", color = 'b')\n",
    "plt.plot(parameter_range, mean_test_score, label = \"Cross Validation Score\", color = 'g')\n",
    " \n",
    "# Creating the plot\n",
    "plt.title(\"Validation Curve with KNN Classifier\")\n",
    "plt.xlabel(\"Learning Rate\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.tight_layout()\n",
    "plt.legend(loc = 'best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "97db8e6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'matplotlib.pyplot' from '/Users/jiheekim/miniforge3/lib/python3.9/site-packages/matplotlib/pyplot.py'>"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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09E+83RT1XObmf9d4LttVB1jjEm7XcmtEnccNpWFG5y3oaSqdSrWSkTED9wHnAAUAXNFZLaqLk4qdjmwWFVPFZF+wDIRmQXEgZ+p6qcikg98IiKvqupiVT07aRu/A0qT1veFqk5M864ZkxLHUUqqYh0mkBNLOGzbESUU9JOfHcBn+ZbMLrKWSsZksFkLZjHs7mH4fuVj2N3DmLVg1m6t74033iAYDNYK0kycOJEjjzySwsJCjjnmGM477zzGjRtHOBzm4osvZty4cUyaNIk33ngDgEWLFnHQQQcxceJExo8fz4oVK9ixYwennHIKEyZMYOzYsTz++OO1tus4DsOGDaOkpKRm2l577cXmzZt5/vnnOfjgg5k0aRLHH388mzdvrlfvm266id/+9rcAfPLJJ0yYMIFDDz2U++67r6bMmjVrOPLII9l///3Zf//9ee89d0T66667jrfffpuJEydy1113UVhYyNe//nUAtm3bxumnn8748eM55JBDmD9/fs32vv3tb3PyySczYsQI/vCHP9SrUyKR4KKLLmLs2LGMGzeOu+66C4CVK1dy/PHHM2HCBPbff3+++OILVJWrr766pmz151P3M08kElx99dUceOCBjB8/nr/85S8t+wMbY4zpkCoicUpbGFAqrojww3991uj8AT1zdr9iresgYKWqrlLVKPAYMK1OGQXyxU340g3YBsRVdaOqfgqgquXAEqBW3z5vmf8D/p3e3TCm5eIJh22VHbNlUDiWYOuOCDsicdSGmTS7wFoqGZOhZi2YxSXPX0JlrBKAtaVrueT5SwCYPm76Lq1z4cKFHHDAAY3O/+ijj1i4cCHDhw/nd7/7HQALFixg6dKlnHjiiSxfvpz777+fH//4x0yfPp1oNEoikWDOnDkMGDCAF154AYDS0tJa6/X5fEybNo1nnnmGs846iw8//JBhw4ZRUFDAEUccwQcffICI8OCDD3LHHXfUbLshF198MX/84x85+uijufrqq2um77HHHrz66quEQiFWrFjBueeey8cff8ztt9/Ob3/7W/773/8C1Bql55e//CWTJk3i2Wef5X//+x8XXHAB8+bNA2Dp0qXMnj0bgNGjR/P973+fYDBYs+y8efNYv349CxcuBKgJmE2fPp3rrruOM844g3A4jOM4PP3008ybN4/PP/+crVu3cuCBB3LUUUfV+8wfeOABevTowdy5c4lEIhx++OGceOKJDB8+vNHPwxhjTMelXjeUSLxlF5qfrt3Ojc8upCIS58xJA5izYFOtLnA5QT9XTx3d2tXdXQOBL5PeFwEH1ylzLzAb2ADkA2eraq0PR0SGAZOAD+sseySwWVVXJE0bLiKfAWXAjar69u7uhDEtFY07lFRF6cjxGlU3uF0VS9At2/ItmZaxoJIxHdSVL13JvE3zGp3/QdEHRBKRWtMqY5V857nv8NdP/lozLbnb1MQ9J3L3SXfvcp0OOuigmgDGO++8ww9/+EMA9tlnH4YOHcry5cs59NBDmTlzJkVFRZx55pmMGjWKcePGcdVVV3Httdfy9a9/nSOPPLLeus8++2xuvvlmzjrrLB577DHOPtttzV5UVMTZZ5/Nxo0biUajTQZQSktLKSkp4eijjwbg/PPP58UXXwQgFotxxRVXMG/ePPx+f0p5ot555x2eeuopAI499liKi4trAmKnnHIK2dnZ5Ofns8cee7B582YGDRpUs+yIESNYtWoVP/zhDznllFM48cQTKS8vZ/369ZxxxhkAhEKhmu2ce+65+P1+CgoKOProo5k7dy7du3ev9Zm/8sorzJ8/nyeffLJmf1esWGFBJWOMyUDxhENJVYyEk/qVpqPKP95fy/1vfsHgXrn88dxJjNyjGxMG98yE0d8a6ltTd+enAvOAY4GRwKsi8raqlgGISDfgKeDK6mlJzqV2K6WNwBBVLRaRA4BnRWRM3eVE5BLgEoCCgoJaN5faUkVFRbttuy11hf1M3kdVSHTkaFIjBPA30x2uq/0tO6vW2EcLKhmToeoGlJqbnooxY8bUBCwakpeXV/O6seax5513HgcffDAvvPACU6dO5cEHH+TYY4/lk08+Yc6cOcyYMYMTTzyRqVOncumllwJw8803c+qpp7Jy5Uq2bt3Ks88+y4033gjAD3/4Q376059y2mmnUVhYyE033dRo/VS10SFS77rrLgoKCvj8889xHKcmoNOUhvaxev3Z2dk10/x+P/F47SFhe/Xqxeeff87LL7/Mfffdx3/+8x/uvvvulLdTre5n/sc//pGpU6c2W3djjDEdVySecLu7teBas7Qqxs3PL+adlVs5ft89uP7kfcnLdn/KnzS2P6dOGEjvvKw01bhVFAGDk94Pwm2RlOxi4HZ1T4wrRWQ1sA/wkYgEcQNKs1T16eSFRCQAnAnUNLdW1QgQ8V5/IiJfAHsDtQZ2UNUHgAcAJk+erFOmTNnN3dw1hYWFtNe221JX2M/qfayMxikPx5tfoIMSIJTlp1tWw/mWutLfsjNrjX20oJIxHVRzLYqG3T2MtaVr600f2mMohRcV1rwvLy8nPz8/pW0ee+yxXH/99fz1r3/le9/7HgBz586lsrKyXtmjjjqKWbNmceyxx7J8+XLWrVvH6NGjWbVqFSNGjOBHP/oRq1atYv78+eyzzz707t2bb33rW3Tr1o2HH36YX/ziFzVdyaqdccYZzJgxg3333Zc+ffoAbmucgQPdu62PPPJIk/Xv2bMnPXr04J133uGII45g1qydOaZKS0sZNGgQPp+PRx55hETCHXUjPz+f8vLyBtdXvY8///nPKSwspG/fvnTv3j2lz3Lr1q1kZWXxjW98g5EjR3LRRRfRvXt3Bg0axLPPPsvpp59OJBIhkUhw1FFH8Ze//IULL7yQbdu28dZbb3HnnXeydOnSWuucOnUqf/7znzn22GMJBoMsX76cgQMH1go8GWOM6dh2ROJURFp2obl4QxnXP7OALeURrjpxb846YFCjN1E6sLnAKBEZDqwHzgHOq1NmHXAc8LaIFACjgVVevqS/AUtU9fcNrPt4YKmqFlVP8BJ9b1PVhIiMAEYBq1p7p4xpSHk4RmU7jvDWGhSoiiYIe13icrMsdGAaZom6jclQM4+bSW4wt9a03GAuM4+bucvrFBGeeeYZXn31VUaOHMmYMWO46aabGDBgQL2yP/jBD0gkEowbN46zzz6bhx9+mOzsbB5//HHGjh3LxIkTWbp0KRdccAELFiyoSd49c+bMmlZIdZ199tk8/vjjNV3fwE2K/c1vfpMjjzySvn37NrsPf//737n88ss59NBDycnZmaT0Bz/4AY888giHHHIIy5cvrwnEjB8/nkAgwIQJE2qSaSdv++OPP2b8+PFcd911zQa1kq1fv54pU6YwceJELrroIm677TYA/vGPf/CHP/yB8ePHc9hhh7Fp0ybOOOMMxo8fz4QJEzj22GO544472HPPPeut87vf/S777bcf+++/P2PHjuXSSy+t10LKGGNMx1SdP6klASVV5clPirjkHx+jCg9ccADfnDw4EwNKqGocuAJ4GTfR9n9UdZGIXCYi1SOE3AIcJiILgNeBa1V1K3A4cD5wrIjM8x4nJ63+HOon6D4KmC8inwNPApep6ra07aAxuN/ZhKMZH1BKpgrl4TjFFREi8c6zX6b1SGfK8D558mT9+OOPmy+4GzKpCVwm1RUyq77pquuSJUvYd999Uy4/a8Esbnj9BtaVrmNIjyHMPG5mvSTdLWmp1BFkUn07al0b+n8kIp+o6uR2qlKH0BbnCLBjWbpkUl0hs+qbSXWFzKpvdV0TjhtQasnIT5XROL+es5RXF2/msJF9uOnUMfTIDTZaPuj37Vb3NztPtN15oiGZ9P96d3Tm/XQcpaQqxqcfvsu4yYe2d3XSJjvgIz8U5O233uy0f8tqnfn/a7WW7GNj5wlrw2ZMBps+bvouj/RmjDHGmPSLxh1Kq2I4LbiRu2pLBTOeXsC6bZV8f8pILjh0KL4MbJ1kTFexK4n3M1Uk7hCtiOCoNpnP1HQdFlQyxhhjjDEmDVShpDJab4izpry4cCO3v7iU3KwAfzx3EpOH9U5b/Ywxuy8adyipirYo8X6mU8BR2FoRpVt2gJwsf3tXybQjCyoZY4wxxhjTysrCMRKqKQeUIvEEv39lOc/O28CkwT259Yyx9O2W3fyCxph2E44lKKuKtShw3Jk4qpSFY1R5ybyzApayuSuyoJIxHYw1IzW7ozPlyTPGmEzkePmToi3In7R+exUznl7Ass3lXHDoUC49egQBn12cGdORVUbjlIdtwBSAWMJhe2WUUMBPt1AAv8+uZboSCyoZ04GEQiGKi4vp06ePBZZMi6kqxcXFhEKh9q6KMcZ0SfGEw/bKluVPenP5Fm5+fjEi8LtvTuCIUc2PdFpXwCd0D9nPemPaSnk41qlGeGst4XiCSEWC3OwAeVl+u57pIuzsY0wHMmjQIIqKitiyZUurrTMcDmdUkCGT6tsR6xoKhRg0aFB7V8MYY7qclnaDiScc/lT4BbM+XMc+e+Zz25njGNAzp8Xbzc3y0y07YBdvxrQBVaWsKk44bgGlxiiwIxKnKpogPxQgFLR8S52dBZWM6UCCwSDDhw9v1XUWFhYyadKkVl1nOmVSfTOprsYYY9KnIhJnRyT1bjBflYe58ZmFfF5Uyjf2H8iVx+/d4lwkPhG65wTIDtgFmzFtwXGUkqoYsRZ0be3KHHW7AldFE3QLBQj6rUtvZ2VBJWOMMcYYY3aBehdNkXjqF5lzV2/j588tJBxzuHnaGKaO2bPF280O+OgeCuKzvCXGtImEo2yvjJJwLHdlS0UTDtt2RAkF/eRnB+y41QlZUMkYY4wxxpgWSjhKSWWUeIoXmY4qD7+7hgfeWsWwvnncduY4hvfNa9E2BegWCpCbZT/hjWkr0bhDSVUUGwtl94RjCSLxBHlZAXIt31KnYmckY4wxxhhjWiAST1BaFUv5IrOkMspNsxfz/qpiThqzJ9d9bR9yslrWbS3gE3rkBAlYFxJj2kxLc6WZpqm63YWrYm6+Jeu+27bSNcq4BZWMMcYYY4xJUUuHEV+wvpQbnlnAth1Rrj1pNGdMGtjiH/WWjNuYttfS77pJndvSM0aW3w0uWbC89TiOEneUhKPEHQfHgbjjkHCU7ICfHrnBVt+mBZWMMcYYY4xphqpSFo4TjqU26pOq8traGE+89gkF3bP56wWT2bd/9xZt05JxG9M+ysMxKqM2wlu61eRbyvLTLcvyLaVKNTlw5D5XB5Hao5umBZWMMcYYY4xpQktHfaqIxJn5whL+tyzGkaP68ouv70f3nJbdHbZk3Ma0PVWlrCpOOG4BpbaiQFU0QTiWoFu25YxLFk84O4NGqiQSbhDJ6WAJvuwvZowxxhhjTCNiCYeSyljKP+JXfFXOjKcXsGF7mLNGBbnqrPEt6rZmybiNaR8tDR6b1qUK5eE4VdEE+aEgWYGu0SWuuoVRdauj5O5rmcLOVsYYY4wxxjSgpUl6n/98A3e+vIz8UID7pk8i8NXSFgWULBm3Me0j4SjbK6MZdSHfWcW9v0V2wEd+KIi/E7TWbCrPUWf4H2dBJWOMMcYYY+poSU6VcCzBb19ZxvOfb2Ty0F7cPG0Mfbpls+Cr1LdnybiNaR+xhMP2ymi75KIxjYvEHaIVEXKzA+Rl+Tv8sbGj5TlqS2kNKonIScA9gB94UFVvrzO/F/AQMBIIA99W1YXevDVAOZAA4qo6OZ11NcYYY4wxxnGU0qoY0RS7wKzbVsmMpxew8qsKLj58GN87ckSL7qxbMm5j2k9LWyOatqXAjkh1l7gAoWD7HyczJc9RW0pbUElE/MB9wAlAETBXRGar6uKkYtcD81T1DBHZxyt/XNL8Y1R1a7rqaIwxxhhjTLV4wqGkKpZyF5j/Lf2KW/67mIBfuOvsCRw2sm+LtmfJuI1pP5XROOXheHtXw6TAUTfYXxl1k3mnO99STTc1hbJwLCPzHLWldLZUOghYqaqrAETkMWAakBxU2g+4DUBVl4rIMBEpUNXNaayXMcYYY4wxtbSkxUIs4XDv/1by2NwvGTOgO78+Yxx79gilvC1Lxm1M+2pJ91bTcVR3VQwF/HQLBXYr31IqeY4cVars/0mz0nkmGwh8mfS+CDi4TpnPgTOBd0TkIGAoMAjYjNva7RURUeAvqvpAGutqjDHGGGO6qIpInB2R1FosbC4Lc8MzC1mwvpT/mzyIHx03imALEmtbMm5j2o+qUlYVJxy3QEEmC8cTRCoS5GUHyG0i31K9PEcJt8taV8hz1JbSGVRq6C9b9093O3CPiMwDFgCfAdVn9MNVdYOI7AG8KiJLVfWtehsRuQS4BKCgoIDCwsJWqn7DKioq0r6N1pJJdYXMqq/VNX0yqb6ZVFdjjDH1tfQC84NVxfziuUXEEg6/PmMsx+1b0KLtWTJuY9qP4yglVTFiKeZLMx2b4t4QqPTyLQGW56idpDOoVAQMTno/CNiQXEBVy4CLAcQ9u672HqjqBu/5KxF5Brc7Xb2gkteC6QGAyZMn65QpU1p7P2opLCwk3dtoLZlUV8is+lpd0yeT6ptJdTXGGFNbwlFKKqPEU8iRkXCUv72zmofeWc2IfnncduY4hvbJS3lblozbmPaV8Iapz8ScOC8t3MifC1exuSxMQfcQ358ygpPG9m/vanUY1fmWTPtJZ1BpLjBKRIYD64FzgPOSC4hIT6BSVaPAd4G3VLVMRPIAn6qWe69PBG5OY12NMcYYY0wXEYknKK2KpdT9YduOKL98bhEfrdnGKeP7c83U0S0agciScRvTvqrz8GRio5WXFm7ktjlLCcfd1lWbysLcNmcpgAWWTIeRtqCSqsZF5ArgZcAPPKSqi0TkMm/+/cC+wKMiksBN4P0db/EC4BmvaXAA+JeqvpSuuhpjjDHGmK6hJSM+zfuyhBufWUhZOMYNp+zLaRMGpLwdwW2h1DM3axdraozZXS1JwN8R/blwVU1AqVo47vDnwlUWVDIdRlqHnFDVOcCcOtPuT3r9PjCqgeVWARPSWTdjjDHGGNN1qCpl4TjhWPP5k1SVf320jvv+9wX9e4Z48OzJ7F2Qn/K2qpNxW+Ok2kTkJOAe3BvOD6rq7XXm9wD+CQzBvU75rar+XUQGA48CewIO8ICq3uMtcxPwPWCLt5rrvWsQRGQG7k3rBPAjVX05vXtoOpKWBJA7otLKGJvKwg3O21QWJhxLtKjVpDHpYuOYGmOMMcaYTq0lCXrLwzFu+e8S3ly+hSmj+/HzU/ajWyj1n8yWjLthIuIH7gNOwM29OldEZqvq4qRilwOLVfVUEekHLBORWbgD+fxMVT8VkXzgExF5NWnZu1T1t3W2tx9u+o0xwADgNRHZW1Vt2K8uoDwcozJDh4Ivrojwr4/W8fSn65ssd8of3uGksXsybeKAFgW9jWltFlQyxhhjjDGdVizhUFIZS2kUoGWbypnx9AI2lYW58vhRnHPg4JSDQ5aMu1kHASu9HgmIyGPANNwUGNUUyPcG8OkGbAPiqroR2Ajg5VxdAgyss2xd04DHVDUCrBaRlV4d3m/d3TIdSUtHdOxINpeF+ecHa3lu3gZiCYfj9y1grz268dA7q2t1gQsFfJxz0GA2lUaYPW8DT35SxL798zltwgBOHLMn3bLtEt+0LfsfZ4wxxhhjOqVU86moKs/N28DvXllOj9wg939rf8YP6pnydiwZd0oGAl8mvS8CDq5T5l5gNu6I0fnA2apaq3mZiAwDJgEfJk2+QkQuAD7GbdG03dveB3W2N7BupUTkEuASgIKCAgoLC1u6X62ioqKi3bbdltK9nwlH2z1/UtWOChZ8nHrsckulw4urY7y7wQ2EHTrAz9eGhSjIKwfKie7j5+mVyraw0jsknLmXn0O6bYFucNIe2Xy4Mc5bRRX85qVl3PXKMibv6eeoQQFG9vCltcVkS/czE3W2fRTAX+c81RrfSQsqGWOM6XBE5CHg68BXqjq2gfmCm5fjZKASuEhVP23bWhpjOrJUu79URRP85qWlvLhwEwcP782vThtDr7zUkmsL0C0UIDfLflKnoKGr27rX/1OBecCxwEjgVRF5W1XLAESkG/AUcGX1NODPwC3eum4Bfgd8O8XtoaoPAA8ATJ48WadMmdKinWothYWFtNe221K69jPhKNsroySc9g4pwYKP32fc5EObLbd66w4eeW8NryzajN8nnD5pIOcfOpT+PXJqlRuHmzSsMYcCP1ZlycZynp23nlcXb+a9DRGG9cll2sSBfG3snikf01oi1f3MZJ1tH0MBPz1yg7WmtcZ30s6AxhhjOqKHce9YP9rI/K/hDvQwCvdO95+pf8fbGNMFOY5SWhUjmkL+pDVbdzDj6QWs3rqD7x05nIsPH17vLm5jqpNxB/y+3a1yV1EEDE56Pwi3RVKyi4HbVVWBlSKyGtgH+EhEgrgBpVmq+nT1Aqq6ufq1iPwV+G8Ltmc6gVjCYXtllBR6uHYIyzeX8/d31/DG0q/IDvo4+6DBTD94CH27Ze/yOkWE/QZ0Z78B3bny+FG8tuQrZs/bwD2vr+C+N1YyZXQ/Tps4gAOH9cZn+d5MK7OgkjHGmA5HVd/yujg0ZhrwqHfh8YGI9BSR/l7eDWNMFxVPOJRUxVJqrfDKok3c9uJSsvw+7jl3IgcP75PydiwZ9y6ZC4wSkeHAetwk2ufVKbMOOA54W0QKgNHAKq916t+AJar6++QF6hz7zwAWeq9nA/8Skd/jJuoeBXzU+rtl2lOqXVw7ggXrS3n43TW8s3Iredl+LjpsGOccNJieua3biig3K8BpEwZw2oQBfPFVBbM/38CchRt5bclX9O8R4rQJAzhlfH8Kuodadbum67KgkjHGmEzUUG6OgXiJXI0xXU+qF5fRuMMfXl/BE58UMX5QD249fWzKF1eWjHvXqWpcRK4AXgb8wEOqukhELvPm34/bfe1hEVmA233tWlXdKiJHAOcDC0RknrfK61V1DnCHiEzE7dq2BrjUW98iEfkPbjLvOHC5jfzWuVRG45SH4+1djSapKp+tK+Hv767hozXb6J4T4NKjRvDNyYPIDwWbX8FuGrlHN35ywt5cfsxevLl8C8/NW89f3lrFX99exaEj+zBtwkAO36uPtbg0u8WCSsYYYzJRSrky2iMBayYlW7W6pk8m1TeT6goN19dRUhrdrbjK4c+fR1lT5nDi0ABnjory1fLP+CqF7TaU4HRX6tqVeUGgOXWm3Z/0egNwYgPLvUPDx31U9fwmtjcTmLmr9TUdV6o509qLqvLBqm089O5q5heV0jsvix8euxdn7j+wXXKwZQV8nLBfASfsV8D67VU8//kG/jt/I9esnE+fvCxOGd+f0yYMYHDv3Davm8l8FlQyxhiTiVLKldEeCVgzKdmq1TV9Mqm+mVRXqF3flgwf/s7Krcx8axEJFW4/cxzH7LNHStvbnWTcmfbZGtPRteQ73x4cVT77Ks5v/z6XpZvKKeiezVUn7s2pEwYQCnaMFo4De+Vw2ZSRfPeo4bz/RTHPzdvArA/W8ej7azlgaC+mTRzAlNH9rEWmSZkFlYwxxmSi2bhDSD+Gm6C71PIpGdO1JBylpDJKvJn8SXHH4YG3VvHIe2vZu6Abvz5jXMp34y0ZtzEdh+MoJVUxYikk4W9rCUd5bclmHnlvDV9siTKol58bTt6Xr43bk2AHPX4EfD6OHNWPI0f1Y0t5hBfmb2T25xv4xXOL6B4KcNLYPZk2cSB77dGtvatqOjgLKhljjOlwROTfwBSgr4gUAb8EglDTVWIOcDKwEqjEHTHIGNNFROMOJVXNj/ZUXBHhxmcX8um6EqZNHMBPT9g75dYClozbmI4j4SjbK6MpJeFvS/GEw4sLN/HI+2v4clsVw/vm8d1xWVx8yiEEfB0zmNSQfvnZXHT4MC44bCifrt3Oc/M28Mxn6/nPx0WMGdCd0yYM4IT9CsjLtvCBqc/+VxhjjOlwVPXcZuYrcHkbVccY04E4CiWV0WYTcn+6djs3PruQikicX3x9P04Z3z+l9VsybmM6lljCYXtl80HkthSJJ/jv5xv5xwdr2VgaZnRBPrefOY6jR/dj0ScfZFRAKZlPhMnDejN5WG9KK2O8uHAjz83bwG0vLuXu11Zwwn4FnDZxAGMHdG/vqpoOxIJKxhhjjDGmw1NVyiNxHNUmA0qOKv94fy33v/kFg3rl8odzJ6XcfSM74KN7KIivhQm5jTHpkeqojm2lKprg2Xnr+ecHa9laEWXswO5cPXU0h43s0+laNfbIDXLOQUM4+8DBLNxQxux5G3h18WZmf76BEX3zOLBPjCH7xeiRm/5R7EzHZkElY4wxxhjToaWaS6W0KsbNzy/mnZVbOX7fPbj+5H1T6q6xO8m4jTHpURmNUx6Ot3c1AKgIx3nykyL+/dE6SqpiHDC0F786bQwHDO3V6YJJdYkI4wb2YNzAHlx5/CheW7KZ5+Zt4PFlMZ5e+TZTRu/BtAkDOGBYL3yd/LMwDbMzpzHGGGOM6bBiCYeSyhhOM31flmwsY8bTC9hSHuGqE/fmrAMGpXSxZ8m4jel4ysMxKqPtP8JbaWWMx+au4z8fF1ERiXPYyD5cfPgwxg/q2d5Vaxd52QGmTRzItIkDmfPGuyyJ9eWlhZt4dfFmBvbM4bQJAzhlfH/65We3d1VNG7KgkjHGGGOM6ZBS6fqiqjz96Xruem05ffKy+cv5BzB2YI+U1m/JuI3pWFSVsqo44Xj7BpSKKyL866N1PPXJeqpiCaaM7sfFhw9jnz0tl1C1wfk+Tp48miuO3YvCZVt4bt4G/vzmFzzw1ioO26sP0yYO4NCRfTI2v5RJnQWVjDHGGGNMh5NKS4XKaJzb5izllcWbOXRkH3516piU8ntYMm5jOp5Uu7mm0+ayMP94fy2zP99ALOFwwn4FXHTYMEb0Sy0vW1eUHfAzdcyeTB2zJ19uq+T5+Rv47+cbeXvFVvp2y+Lr4wdw6oT+DOqV295VNWliQSVjjDHGGNNhOI5SWhUj2syF5aotFcx4egHrtlXy/aNHcsFhQ1PK52HJuI3peBKOsr0ySsJpn5TcRdsrefT9tbwwfyMKnDKuPxccOpTBvS0Q0hKDe+fygyl7ccmRI3j3i2Jmz9vAo++v4eH31nDgsF6cNmEAR4/uZwH9TsaCSsYYY4wxpkOIJxxKqmLNXli+uHAjt7+4lJygnz+eO4nJw3o3u25Lxm1Mx1QVTVAeidFM2rS0WLWlgkfeX8srizYR8Pk4fdJAvnXIEPr3yGn7ynQiAb+Po/fux9F79+Or8jD//Xwjsz/fwM+fW0T3nAAnj+3PaRMGMDLFkTlNx2ZnVWOMMcYY0+5SyZ8UiSf4x+IobxYtZuLgntx6+tiUEsJaMm5jOp5IPEFFOE68HVonLdtUzt/fXU3hsi2Egn7OPWgI5x08hL7dLMF0a9sjP8S3jxjORYcP4+M123lu3nqe+rSIx+Z+ydiB3Zk2YSDH77eHBfwzmP3ljDHGGGNMu6qIxNkRaXro8PXbq5jxzAKWbYpzwaFDufToESklgLVk3MZ0LPGEQ0UkTiTe9rmTFhSV8vf3VvPuymLysv1cdPgwzjlwMD1zs9q8Ll2NT4SDhvfmoOG9KamM8uLCTTz72XpmzlnCXa8t54T9Cpg2cQD79e9ux+sMY0ElY4wxxhjTLlTd/EkNXVy+tHAjfy5cxeayMD1yg1RF4mQF/VwxMYvzj9mr2XVbMm5jOhbHURxVtu2INtkisbWpKp+uK+Hv765m7prt9MgJctnRIzjrgEHkh5pP7G9aX8/cLM49aAjnHDiYBetLeW7eBl5etInn5m1gr37dmDZxAFPH7kmPHPv7ZAILKhljjDHGmDbXVP6klxZu5LY5Swl7waaSyhgCfP+Y4Yz1rW923ZaM25iOQ1WpjCbYEY3jKG0WUFJV3l9VzN/fXcP8olL65GXxo+P24oxJA62rVQchIowf1JPxg3rykxP25tXFm5k9bwO/e3U5f/zfSo7Zpx+nTRjAAUN7WeulDsy+TcYYY4wxpk1F4glKqxpPzPvnwlU1AaVqCjz20ZfcekjjXd4sGbcxHUs4lqAiEm/TUd0cVd5avoWH3l3Dsk3l7Nk9xNVTR3PqhP7WcrED65Yd4IxJAzlj0kCWby5n9rwNvLRoEy8v2sygXjmcNmEAp4zvb3mvOiA74xpjjDHGmDazIxKnopn8SZvKwg1O31wWBhoe4tuScRvTccQSDuXhOLFE2+VNijsOry/5ioffXcOqrTsY1CuHG07Zl6+N3ZOgHRcyyt4F+Vw1dTRXHLsXbyz7itnzNvCnwi/4y5urOHxUH6ZNHMghI3oT8PlqdZUu6B7i+1NGcNLY/u29C12KBZWMMcYYY0zaqSplVXHC8USjZWIJh3v/t7LR+QXdQw1Ot2TcxnQMCUepCDf9PW9tsYTDiws38ch7ayjaXsWIvnncPG0Mx+27R0rJ/E3HFQr6+drY/nxtbH/WFVcy+/MN/Hf+Bt5avpV++dnsu2c+H67eVpOXb1NZmNvmLAWwwFIdLy3cyP1vrmJTaZgBPXO4eupoTp80sFXWbUElY4wxxhiTVglHKamMNjl0eNH2Sm58diFLNpZz8PBezPuytFYC71DAx/enjIDwmppplozbmI5BVdkRTVAZibdZzqRIPMHzn2/kH++vZVNZmNF75vObb4zjqL374bMAc6czpE8uVxy7F5cdPYJ3Vm7luXkbeGvF1nrlwnGH37y0jOWbK/CJIEKtZ5+4uZwEGpyfXG7juhgrfEVA9bSmy6e63upyO6c1XT7V7TdW7vUlX/HbV5bVnFPXl1Qx4+kFAPRshb+NBZWMMcYYY0zaROMOJVXRRvMnAby2eDMz5yzB7xN+841xTBm9R6NdGhZ8vAawZNzGdBRV0QTlkcZzpKVje898tp5/frCW4h1Rxg3swbVfG82hI/pYa8UuIOD3MWX0HkwZvQeH/Pr1BoOYldEET35ShCoo6iaIV/e5xZYu290qd0hVsQR3vryMmU3kKUyVBZWMMcYYY0xaVEbjlIcbz58UjiW4+7UVPPPZesYO7M6tp4+lf48cwO260Fj3hXxLxm1Mu4vEE1SE4022QGxNFeE4T3zyJf/+6EtKq2JMHtqLm6eNsZHBurCC7qEGc/Dt2T3Ec1cc3uAy1cGl6mdHtcHgk6qy6LOP2WfCAfXKqfe+bvmWlKt5TrGc40Vtq9ffVPnq+eqV/8PrDXcr31BSBeTt9t/BzsbGGGOMMaZVqSpl4TjhWON5VVZv3cGNzyxk5ZYKzj9kKJcdPaLZJNsBnxDwiQWUjGlH8YRDRSReq3tqOpVURnls7pc88XERFZE4h+/Vh4sPG864QT3aZPum4/r+lBHcNmdprdFCa7pKN0JE8Au444U2rXu20KcTjDb3n7lFDQbfBvTMaZX12xnZGGOMMca0moSjlFbFmhz16YX5G7nj5aXkBP3cffZEDh3Zp9n1VifjNsa0D8dRKqJxqqJtk4S7uCLCrA/X8fSn66mKJThmdD8uPnw4o/fMb5Ptm46vujWrjf7WtIaCbzlBP1dPHQ2lK3Z7/XZmNsYYY4wxrSIadyititU006+rMhrnjpeW8eLCTew/pCc3TxtLv/ym7wJbMu7OQ0ROAu4B/MCDqnp7nfk9gH8CQ3CvU36rqn8XkcHAo8CegAM8oKr3eMvcCZwKRIEvgItVtUREhgFLgOqEKB+o6mVp3sVOSVWpjCbYEY23et6khnKnTRzci398sJbZ8zYQdxxO3G9PLjxsKCP6dWvdjZtOoamu0sZV/fk0NPpbYaEFlYwxxhhjTAdQFU1QHo41OvLT8s3l3PDMQoq2V/K9I4dz8eHD8TeTZDsU8JMfClgy7k5ARPzAfcAJQBEwV0Rmq+ripGKXA4tV9VQR6QcsE5FZQBz4map+KiL5wCci8qq37KvADFWNi8hvgBnAtd76vlDViW2zh51TOJagPBxvNFC8O15auLFW64lNZWFufn4Jjip+n3DK+P6cf8hQBvfObfVtG9PVnDS2P6dPHESP3GCrr9uCSsYYY4wxZreUhWONdolRVZ7+dD13v7aC7jkB7j1vfw4Y2qvJ9YlA91CQUNBaJ3UiBwErVXUVgIg8BkwDkoNKCuSLm3W5G7ANiKvqRmAjgKqWi8gSYCBuAOqVpOU/AM5K+550AdG4mzepqW6su+vPhatqdccBSKiSm+Xn3987hD17hNK2bWNM67GgkjHGGGOM2SWOlz8p2siFZ3k4xswXlvDGsi0cOqIPvzx1P3rlZTW5zuyAj+6hoLVO6nwGAl8mvS8CDq5T5l5gNrAByAfOVtVa/7m8bm2TgA8b2Ma3gceT3g8Xkc+AMuBGVX17d3agK0g4SkU4Tjie/rxJmxtIHAxuq0cLKBmTOdIaVEqh33Qv4CFgJBAGvq2qC1NZ1hhjjDHGtJ9YwqGksvH8SYs2lHLDMwv5qjzCFcfuxfSDh+BrYthva53U6TX0x6/7n2cqMA84Fvf64FUReVtVywBEpBvwFHBl9bSalYvcgNtNbpY3aSMwRFWLReQA4FkRGdPAcpcAlwAUFBRQWFi463u4GyoqKtpt29WqhyhPp6odFSz4+H0AeoWEbeH6G+wVkpoymSh5HzuzrrCfnW0fBep1O2+NY0/agkop9pu+HpinqmeIyD5e+eNSXNYYY4wxxrSDcCxBWVXD+ZMcVf790True+ML+nXL5i/fOqDZob+zAz7yQ8FmcyyZjFYEDE56Pwi3RVKyi4HbVVWBlSKyGtgH+EhEgrgBpVmq+nTyQiJyIfB14DhvWVQ1AkS815+IyBfA3sDHycuq6gPAAwCTJ0/WKVOmtMKutlxhYSHtte3KaJyKSOsn4W7Igo/fZ9zkQwEYs/pz3l6xtdb8UMDHj0/ch3EZnHg5eR87s66wn51tH0MBf72cSq1x7ElnS6VU+k3vB9wGoKpLRWSYiBQAI1JY1hhjjDHGtLHycIzKRvInlVRGufm/i3l3ZTFT9u7HDafsS/ecxpOCikB+dpCcLGud1AXMBUaJyHBgPXAOcF6dMuuA44C3vWuC0cAqL8fS34Alqvr75AW83g3XAkeramXS9H7ANlVNiMgIYBSwKj27lpkicTcJdyLdzZMa8Orizby9Yiv7D+nJhpIqNpdFbDh4YzJUOoNKqfSb/hw4E3hHRA4ChuLetUhlWWOMMcYY00aay5/02brt/Py5RZRURrnqxL0564BBSBPd3bL8PrrnWOukrsIbne0K4GXc9BYPqeoiEbnMm38/cAvwsIgswO2pca2qbhWRI4DzgQUiMs9b5fWqOgc3D1M2blc5gA9U9TLgKOBmEYkDCeAyVd3WVvvbkcUTDuXheKPf5XRbuqmMW/67mAmDevCHcycR9PvapR7GmNaRzqBSKv2mbwfu8U4OC4DPcPtCp7Ksu5E27gfdEfo7pyqT6gqZVV+ra/pkUn0zqa7GGLM74gmHkqpYgy0aEo7yyHtr+OvbqxjQM4e/XXggo/fMb3RdAuSHrHVSV+QFgebUmXZ/0usNwIkNLPcODV8foKp7NTL9KdzucsbjOEp5JE44lv4k3I0pjSh3PDmfnrlBbv/GeAsoGdMJpDOo1Gy/aS9R3sUAXrPW1d4jt7llk9bRpv2g27O/c0tlUl0hs+prdU2fTKpvJtXVGGN2VVP5k4orIvxy9iLmrtnO1DEFXHvSPuRlN/7z0lonGdP2VJXKaIIdkXjDd+nbSCzh8OfPI5RUwl8vmEzvZkaCNMZkhnQGlZrtNy0iPYFKVY0C3wXeUtUyEUmlz7UxxhhjjEmjikicHZF4g/M+XF3ML59bRGU0wQ2n7Mup4/s32t1NgG6hALlZaR142BhTRzjm5k1qbJTGtqKq3PnyMlaWONx6+tgmWzMaYzJL2s7sKfab3hd4VEQSuEm4v9PUsumqqzHGGGOM2UnVzZ8UidfPuRJ3HB54axWPvreWYX3z+NP0sYzo163RdQX9PrqHAgSsm4sxbSYad6iIxIm1U96kup78pIjn5m3g5OEBTtivoL2rY4xpRWm9XZRCv+n3cUdiSGlZY4wxxhiTXk3lT9pcFubGZxcyv6iUaRMH8NMT9iYUbDg3krVOMqbtJRylIhwnHG+/vEl1fbxmG3e9uoIj9urL6cN3tHd1MooAIoJP3ATD7TFSnzHNsbO8McYYY4wB3CHGS6tiNNRT5q3lW7jlhcXEE8rN08Ywdcyeja7HWicZ07YcR9kRjVMVTbRr3qS6NpRUcf0zCxncO4dfTRvD6gVz27tKHYLPCxT5RPD53Nd+n+ATQQT8IjXzkqkqsYQSSzjEE0o04bR710ZjLKhkjDHGGGPYEYlT0UD+pGjc4d43VvL43C8ZXZDPrWeMZUjv3AbXIUBedqDJZN3GmNZVGXW/ux0ttlAZjXP1E/NxVLnzmxPo1smPC9XBIAFCQX9N0MjvazpQ1LJtCFkBISuwM2DvOErMcYgllHjCfbZAk2lLnfubbYwxxhhjmlVaGWuwu0zR9kpueGYhSzeV83+TB/HDY0fVuphJFvAJPXKC1jrJmDYSjiWoiMQ7ZJcoR5VfPb+YVVsruOvsiY0Gojs6qQ4M1QSEqlsZ7XztrxMo8nvHwrbi8wnZPj/JMbuE47VmcpRY3CHmOB0u6Gg6DwsqGWOMMcZ0UQlHSTjaYEDp1cWb+fWcJfh9wh3fGM/Ro/s1uA4BcrMDnb4VgjEdRSzhUBGOE+0gSbgb8tA7qylctoUrjx/FISP6tHd1aqkbKBIfDQaN/LvRoqi9+X2C3+flu8t2n6oDTbHEzlZNFmcyrcHO/sYYYzocETkJuAd3BNAHVfX2OvN7AP8EhuCey36rqn9v84oak8GicYeSqmi9i4pwLMFdry7n2XkbGDuwO7eePpb+PXIaXEfAJ3TPCRK01knGpJ3jKOWROOFYx0nC3ZA3ln7FX99ezSnj+nPOgYPbZJsCXm4iN1gkSa2IJClfkU/cLmRdUXWgKXlwherucjHHzdFkgSazKyyoZIwxpkMRET9wH3ACUATMFZHZqro4qdjlwGJVPVVE+gHLRGSWqkbbocrGZJzKaJyKcLzexcPqrTu48ZmFrNxSwQWHDuXSo0Y02J2tunVSXpa/y16gGdNWVJUd0QSVkfrf2Y5m5VcV/Or5xYwZ0J1rvzZ6t44PyYEin9R5ndSaqCsHinZXwO8j4Icc3ECTqrpd5pJaM8U7YPdK07FYUMkYY0xHcxCwUlVXAYjIY8A0IDmopEC+uL8iuwHbgPoZho0xtagqZeH6LR1UlRcWbOTOl5eRE/Rz99kTOXRkw11WrHWSMW2nKurmTcqExMsllVGueuJz8rL9/OYb48kO+JtfyNMtO1CrNZGb3NoCRW1NRAj6pdbxvXrEubjjEIu7rZo6Yh4v034sqGSMMaajGQh8mfS+CDi4Tpl7gdnABiAfOFtVO25yCWM6gISjlFbFiNXJwxKOuwl1X1y4if2H9OTmaWPpl5/d4Dpys/x0yw7YxZ4xaRaNO5SHYxnTSiSecJjx9AKKK6Lcf/7+jR5DGhIK+G3EyA6sZsQ5fJDlTnMcxe8TumUHalo1ZULg06SHfXuNMcZ0NA1drdb9pTIVmAccC4wEXhWRt1W1rNaKRC4BLgEoKCigsLCw1StbV0VFRZtspzVYXdOno9VXocE7y+vKHO6fV8WWcBXTRgY5ZUSETcs+ZVMD6/D7pMEvZ1vraJ9tUzKprqZjiCccKiJxIvHMuk9y92sr+HRdCb88dT/GDOjRomXzslNv0WQ6Bp93PkgOBjqOEvW6y8UTDtGEjTjXVVhQyRhjTEdTBCRn9hyE2yIp2cXA7aqqwEoRWQ3sA3yUXEhVHwAeAJg8ebJOmTIlXXWuUVhYSFtspzVYXdOnI9W3KpqgPByrFZlVVZ76dD33zF1BTsDHfdMnccDQXg0u39FaJ3Wkz7Y5mVRX0/7KwzGqookOnzeprufmreeJT4o47+AhnDyuf4uWDQX9DeZtM5nH5xNCvtoBwuQR5+JeQnALNHU+FlQyxhjT0cwFRonIcGA9cA5wXp0y64DjgLdFpAAYDaxq01oakwHKvIvUZOXhGDNfWMIby7Zw6Mg+/N/gygYDSn6f0D0UJCtgF3zGpIuqUhVLEHeUymjHHtWtIfO+LOGOl5ZxyIjeXHHMXi1aVnBzKZnOq7ER5+LVrZpsxLlOwb7FxhhjOhRVjYvIFcDLgB94SFUXichl3vz7gVuAh0VkAe7v0mtVdWu7VdqYDsbx8idF6+RPWrShlBueWchX5RGuOHYvph88hEWffFBv+ZwsP/kdqHWSMZ1ROOYm4c7UpMebSsNc99R8+vcMccu0sfh9LTte5GT5W7yMyXzVI84lB5qSWzLF4m4i8Mz8VnRNFlQyxhjT4ajqHGBOnWn3J73eAJzY1vUyJhPEEg4llbFaSVMdVf790True+ML9sjP5i/nH8C4gfXznvhE6JFjrZOMSadYwqEiHK8X9M0k4ViCa56cTyTu8OezJtA9J9ii5UUgL8suRY0r6PcR9EMObqCp1ohzCbcLXaYGX7sC+yYbY4wxxnQS4ViCsqra+ZNKKqPc/N/FvLuymCl79+OGU/Zt8ALQWicZk14JR6mIxAnHMq+bWzJV5Zb/Lmb55nJ++38TGN43r8XryM0K4LNWSqYRtUac81QHmpJbNVmgqWOwoJIxxhhjTCdQHo7Vy8ny2brt/Py5RZRURrnqxL0564BBDQaNeuYGyQ7YCEzGpIOqsiOaoDIS7xRdeh55fy2vLfmKH0wZyRF79W3x8m4rJTvemJapCTQltaR1HDe45OZmcls2Wde5tmdBJWOMMWkjIocD81R1h4h8C9gfuEdV17Zz1YzpNBrKn5RwlEfeW8Nf317FgJ45/O3CAxm9Z369ZUNBPwGfWEDJmDSpirp5k5xOMuTV2yu2cH/hF5y4XwEXHDp0l9bRkUaTNJnN5xOyfX7q5nuvTgaecCzY1BYsqGSMMSad/gxMEJEJwDXA34BHgaPbtVbGdBLxhENJVaxWF4CtFRF++dwiPl67naljCrj2pH3Iq/OL2ydC95yABZOMSZNIPEFFOE68E3XPWb11B794bhF775nPDafsu8uBoZygHXdMelUnA68r4bgBJjfQpDXvO0nMt91YUMkYY0w6xVVVRWQabgulv4nIhe1dKWM6g4byJ32wqpibZi+iMprghlP25dTx/etd+IWCbu4ky2diTOuLJxwqInEi8cxNwt2QsqoYVz3xOaGgnzvPGl9r5K6W8ItYKyXTbvw+wd9Ay6bq4JL7vLN1k0mNBZWMMcakU7mIzADOB44UET/QsiFijDH1VETi7IjEa97HHYcH3lrFI++tZUTfPP40fSwj+nWrtYxPhPxQYJcvBo0xjXMcpSIaJxxNdLouNnHH4cZnF7KpNMyfpu9PQffQLq3H7xMsnmQ6oupgU10Bn9ArN8tt3eQoCa+FU2fpztpaLKhkjDEmnc4GzgO+raqbRGQIcGc718mYjKXq5k9KbgWxqTTMz59byPyiUqZNHMBPT9i7XuAoFPCTH7LWScakS928Zp3Jff/7gg9Xb+OGk/dlwuCeu7yebnWbhxiTAbICvlqj0IEbRE7uPpdw3JHpumqwydd8EWOMMWbXqOom4Ckg25u0FXim/WpkTOaKJxyKd0RrBZTeWr6F8//2ISu/quDmaWO4/uR9awWURKBHTpAeuUELKJl2JyInicgyEVkpItc1ML+HiDwvIp+LyCIRudibPlhE3hCRJd70Hyct01tEXhWRFd5zr6R5M7xtLRORqW2zl53LnAUb+ddH6/jmAYM4beKAXV5P0O+zVpKm0/D53FHocrL85IeC9MzNol9+NnvkZ9M7L4seOUFys/xkB3z4u8C518LFxhhj0kZEvgdcAvQGRgIDgfuB49qzXsZkmkg8QWlVrCaZaDTucO8bK3l87peMLsjn1jPGMqR3bq1lrHWS6Ui87s/3AScARcBcEZmtqouTil0OLFbVU0WkH7BMRGYBceBnqvqpiOQDn4jIq96y1wGvq+rtXqDqOuBaEdkPOAcYAwwAXhORvVU10Vb7nOkWri/ltjlLOWBoL648ftRurctaKZmuQEQI+oWgn1pBVNXklk1uN7qY4+B0khHpUv52i0gOMERVl6WxPsYYYzqXy4GDgA8BVHWFiOzRvlUyJrPsiMSpSMqfVLS9khueWcjSTeX83+RB/PDYUWQFdjY+F4HuoaC1CjBptQvXBgcBK1V1lbf8Y8A0IDmopEC+uJmcuwHbcAd82AhsBFDVchFZgnuTYrG3jine8o8AhcC13vTHVDUCrBaRlV4d3t+lHe5itpRHuPap+fTNz+K2M8YR8O96B5csv6/WMcqYriY52FRXPOHma9qZs8ntTpdJwaaUgkoicirwWyALGC4iE4GbVfW0NNbNGGNM5ouoarR6pBcRCUBGnSeNaTeqSllVnHB8Z8OKVxdv5tdzluD3CXd8YzxHj+5Xa5nsgI/uIevqZtJrF68NBgJfJr0vAg6uU+ZeYDawAcgHzlbVWomKRGQYMAnvZgVQ4AWdUNWNSTcuBgIf1NnewFT2r6uLxBNc+9R8dkQS3HPOJHrk7t74Gt1C1krJmMYE/D4CDQSb3DxNO0ekSzhKPOF0yB/RqX7Db8KN7BcCqOo874BujDHGNOVNEbkeyBGRE4AfAM+3c52M6fASjlJSGSXuuD8fw7EEd726nGfnbWDcwB7ccvoY+vfIqSlvrZNMG7uJll8bNBTprHt9NBWYBxyL22X6VRF5W1XLAESkG26eviurp+3m9hCRS3C7aVNQUEBhYWEzq23Y7rYsqNpRwYKP278Rlary0MIoizYm+MGELKrWLWDBul1fn0CtnDIVFRW7/Blniq6wj9A19rOj7qMCqqAo3r+U1P0+QuvsY6pBpbiqloqNAWmMMaZlrgO+AywALgXmAA+2a42M6eCicYeSqmhN/qRVWyq48dmFfLFlBxccOpRLjxpRqytKdsBHfijYJZKBmg5jV64NioDBSe8H4bZISnYxcLuqKrBSRFYD+wAfiUgQN6A0S1WfTlpms4j091op9Qe+asH2UNUHgAcAJk+erFOmTGnJPtXYviO6W6O/Lfj4fcZNPnSXl28t//pwHe9vXMH3jhzOhUeO2O319cnLqnW8KiwsZFc/40zRFfYRusZ+ZtI+Oo6bp6lu3qbkAelCAX+9loetsY+pBpUWish5gF9ERgE/At7brS0bY4zp9LxuC3/1HsaYZlRG41SE495dSOWFBRu58+Vl5AT93H32RA4d2aemrAjkZwfJybLWSabN7cq1wVxglIgMB9bjJtE+r06ZdbgDObwtIgXAaGCVl2Ppb8ASVf19nWVmAxcCt3vPzyVN/5eI/B43Ufco4KMW72kX8sGqYv74vxUcM7of3z5i+G6vLxT071YuJmNM6nw+IdtX//eAk9R9Ll1thFL9lv8Qd+SECPAvoBS4Mj1VMsYY01mIyNdF5DMR2SYiZSJSLiLNdVkwpstRVUqrYpR7AaUdkTg3Pb+YW/67hP36d+cf3zm4VkApy++jT162BZRMe2nxtYGqxoErgJeBJcB/VHWRiFwmIpd5xW4BDhORBcDrwLWquhU4HDgfOFZE5nmPk71lbgdOEJEVuCPL3e5tbxHwH9xk3i8Bl9vIb41bt62SG59dyIh+3fjFqfvh282rT8FGfDOmI/D5hKyAj5wsf9q6yDf7TfeG/5ytqscDN6SlFsYYYzqru4EzgQVedwZjTB2Oo5RUxYh5XWeWby7nhmcWUrS9ku8dOZyLDx9e07VNgPyQtU4y7Wd3rg1UdQ5uN+jkafcnvd4AnNjAcu/QcI4kVLUYt3VTQ/NmAjNbUseuqCIc5+onPscnwp1njSc3a/eDQTlZfuuSa0wX0ewRQ1UTIlIpIj1UtbQtKmWMMabT+BJYaAElYxoWjTuUVsVwVFFVnvp0Pfe8toLuOQHuPW9/Dhjaq6Zslt9H9xzLnWTal10bdC4JR/nF7IV8ub2KP547iQE9c5pfqBkikNcKgSljTGZI9dseBhaIyKvAjuqJqvqjtNTKGGNMZ3ENMEdE3sTtJgFAAzkxjOlyqqIJysMxFCgPx5j5whLeWLaFQ0f24Zdf349eeVmA140kFGiV1gPGtBK7Nugk7n/zC95dWczVU0fXCmLvjtysAD4LfhvTZaT66+QF72GMMca0xEygAggBWe1cF2M6BFWlPBKnKuqmd1m4vpQbn13IV+URrjh2L6YfPKQmn0nQ76N7KGDJbk1HY9cGncDLizbx6PtrOX3iAL6x/8BWWafbSsm65xrTlaQUVFLVR0QkC9jbm7RMVWPpq5YxxphOoreq1suPYUxXFU84PDZ3Hff+7ws2l4XpFgpQEY6zZ48Qfzn/AMYN7AG4rZPysgPkWaJb0wHZtUHmW7qpjJkvLGHi4J5cNXU00krDQnXLDrTauowxmSGlXyoiMgV4BFiD+ztnsIhcqKpvpa1mxhhjOoPXROREVX2lvStiTHurjMZ58uMv+fWcpYTjblLu8nAcn8CFhw6tCShZ6yTT0dm1QWYrrohw9RPz6Zkb5LYzxxFspWONT4ScNI0uZYzpuFI9gvwOOFFVj1bVo4CpwF3NLSQiJ4nIMhFZKSLXNTC/h4g8LyKfi8giEbk4ad4aEVngDRn6cao7ZIwxpkO5HHhJRKpEpExEykWkrL0rZUxbchylpDJKeTjOnwpX1QSUauYrPPze2pohuHvnZVlAyXR0u3RtYNpfNO5w3dMLKK2KcedZE+id13o9062VkjFdU6ptqoOquqz6jaouF5FgUwt4w43eB5wAFAFzRWS2qi5OKnY5sFhVTxWRfsAyEZmlqlFv/jGqujXlvTHGGNOhqGp+e9fBmPYUiScoq4rjqOKosqks3GC5zWVhCyaZTNLiawPT/lSV376yjPlFpdx6+lhG79l6p2i/T8ixXErGdEmpBpU+FpG/Af/w3k8HPmlmmYOAlaq6CkBEHgOmAclBJQXyxQ1pdwO2AfEU62SMMaaDEpF9VHWpiOzf0HxV/bSt62RMW6uIxNkRcX/WlFRGuen5xY2WHdAzxwJKJpPsyrWBaWdPflLEc/M2cNFhwzhhv4JWXXc3y/9mTJeV6rf/+7itin6E22/6LeBPzSwzEPgy6X0RcHCdMvcCs4ENQD5wtqpWtwlX4BURUeAvqvpAinU1xhjT/n4KXILbRaIuBY5t2+oY03YSjpJwtCag9PmXJdz47EK2V0b5+rg9eW3JV7W6wOUE/Vw9dXR7VdeYXbEr1wamHX28Zht3vbqCI0f15dKjR7TquoN+HyHLpWRMl5VqUCkA3KOqv4earm3ZzSzTUIdarfN+KjAP9+JiJPCqiLytqmXA4aq6QUT28KYvbSj5n4hcgnvhQkFBAYWFhSnu0q6pqKhI+zZaSybVFTKrvlbX9Mmk+mZSXduaql7ivfyaqtbq7yMioXaokjFtIhxLUFYVQwFHlVkfrOPPhV+wZ48QD144mX327M6Bw3tz/5ur2FQaZkDPHK6eOprTJ7XOcN7GtJFduTYw7WT99ipmPLOAIX1yuem0MfhaOe9RXrYFlIzpylINKr0OHA9UeO9zgFeAw5pYpggYnPR+EG6LpGQXA7erqgIrRWQ1sA/wkapuAFDVr0TkGdzudPWCSl4LpgcAJk+erFOmTElxl3ZNYWEh6d5Ga8mkukJm1dfqmj6ZVN9Mqms7eg+o2wWuoWnGZDRVpSwcJxxLAFARVa564nPeXVnMMaP7ceMp+9EtFEAEzj5wCBceNryda2zMbtmVawPTDiqjca5+8nNQuPOs8a3eTS3L7yM7YEElY7qyVI8qIVWtPmmgqhUiktvMMnOBUSIyHFgPnAOcV6fMOuA44G0RKQBGA6tEJA/wqWq59/pE4OYU62qMMaadicieuN2gc0RkEjtbr3YHmjt/GJNRYgmH0qoYCcdtkL1gfSk3fxCmLBrmqhP35qwDBiEiBHxCj5yg5U4yncGuXBuYNuao8qvZi1m9dQd3nzORwb1b/0/ULWS5lIzp6lI9CuwQkf2rE6uKyGSgqqkFVDUuIlcALwN+4CFVXSQil3nz7wduAR4WkQW4FxzXqupWERkBPOMNSRkA/qWqL+3C/hljjGkfU4GLcFup/o6dQaUy4Pp2qpMxrW6Hl4xbcVsr/eujddz3xhf0yoYHL5zMvv27AxAK+OmeY8Ntm06jxdcGpu397e3VFC7fwpXHj+Lg4X1aff2hgJ+gBcmN6fJSDSpdCTwhIhtw8yINAM5ubiFVnQPMqTPt/qTXG3BbIdVdbhUwIcW6GWOM6WBU9RHgERH5hqo+1Vg5EbnQK2tMRkk4SllVjGjCTbhdVhXj5v8u5u0VW5mydz/OHFjBvv27I7h38nOz7G6+6VSuZBeuDUzb+d/Sr3jwndWcMq4/5xw4uPkFdoHlUjLGADQZWhaRA0VkT1Wdi5vr6HEgDrwErG6D+hljjMlgTQWUPD9uk4oY04rCsQTFOyI1AaWF60u54KGPeP+LYn5y/Chu/8Y4coOCT4SeuVkWUDKdhl0bZIYVX5Xzq+cXMWZAd6792ui0tJAMBf3WldcYAzQTVAL+AkS914fidlm4D9iOlxzbGGOM2Q3WF8hkDDcZd4zSqhiq7vt/f7SOS//xCQAPXHAA5xw0BBFBgD55WWQF7KLLdCp2bdDBlVRGufqJ+eRnB7njrPFpSaIt0OoJv40xmau5o4FfVbd5r88GHvDuOj8lIvPSWjNjjDFdgbZ3BYxJRdxLxh33knGXVcW49YUlvLl8C0ft3Zefn7If3XOCAORk+fH7BJ/PYqam07Frgw4snnCY8fQCiiui/OX8A+jbLTst26k+xhljDKQQVBKRgKrGcUdpu6QFy2aOSAQqKyE7G7KyINB5ds0YYzo4+1VqOrzKaJyKcLwmArp4QxnXP7OAr8oj/Pi4UZx70OCa1kndc4KEgpZnxHRaXePaIEP9/tXlfLquhJtO24/9BnRPyzYEyLMuvcaYJM0dEf4NvCkiW3FHdHgbQET2AkrTXLe2E43C+vVuQEkVgkHIzYW8PHdaMAg+a75ujDEtJSLDVXV1E9PebYdqGZMSx3G7u0Xibu4kVeWJj4u45/UV9O2WzV/OP4BxA3sA4PcJPXOClmPEdHZd49ogAz3z2Xqe+nQ90w8ewtfG9k/bdnKzA9YK0xhTS5NBJVWdKSKvA/2BV1S1+iadD/hhuivXprKyoFs393Ui4bZcKitzg0wiEAq58x0H4nFrzWSMMal5Cti/zrQngQMAVPWKhhYSkZOAewA/8KCq3t5AmSnA3UAQ2KqqR7dWpY2JxBOUVcVxvJ8+FeE4t76wmDeWbeGIvfryi1P3o4fX3S074KNHTjAtyXCN6Ui61LVBBpn3ZQm/fXkZh47ow+XH7JW27YhAXpa1xDTG1NZsZERVP2hg2vL0VKeD8PvdRzVVN5C0bRvEYrBqlRtUyslxWzNlZ1trJmOMSSIi+wBjgB4icmbSrO5AqJll/biJX08AioC5IjJbVRcnlekJ/Ak4SVXXicgerbwLpguriMTZEYnXvF+6qYzrn17IptIwPzx2L847eAg+L4DULTtAniWsNV1Il7w26MA2lYa57qn59O8Z4uZpY9Ka66hbdsCC58aYeuxXUCpE3KBRdeCousVSVRWUl+8sl53tzguFdnabM8aYrmk08HWgJ3Bq0vRy4HvNLHsQsFJVVwGIyGPANGBxUpnzgKdVdR2Aqn7VOtU2XVnCUUqrYsQSO7u7PfXpeu5+bTm9crO4//z9GT+oJ+D+NOiRE0zLyErGGJOKcCzBNU/OJ5pw+O1ZE2oGC0gHnwg5li/OGNMACyrtKp/PDR4li8Vg+3Y34KTqtnbKy3PzM1UnAbfWTMaYLkBVnwOeE5FDVfX9Fi4+EPgy6X0RcHCdMnsDQREpBPKBe1T10V2trzHhWIKyqlhNMu6KcJxfz1nC60u/4rCRfbjp1DH0yHUv2AI+oWdulo1+ZIxpN6rKLf9dzPLN5fzu/yYwrG9eWrdnrZSMMY3p2kGlWbPghhtg3Tro3x9mzIAzz2x+ucZUt2aq5jgQDkNFhftaZGfuppycnSPN2QHaGNPJiMg1qnoHcJ6InFt3vqr+qKnFG5imdd4HcPMyHQfkAO+LyAd1u2CIyCV4oxMVFBRQWFiY+k7sooqKijbZTmuwuroSqmjS/7B1ZQ5//jxCcVj5xqggU4dVsm7xx4B7yvancN62zzZ9Mqm+mVRXk1keeW8try35isuPGcnhe/VN67b8PiHHcikZYxrRdYNKs2bBJZe4CbkBNmyAa65xX+9OYCmZz+e2UMrO3jktHofSUigudt/7/W6AqVu3nbmZ/HbQNsZkvGuBO4AvgO0tXLYIGJz0fhCwoYEyW1V1B7BDRN4CJgC1gkqq+gDwAMDkyZN1ypQpLaxKyxUWFtIW22kNXb2usYRDaVWMhONGlFSVZz5bz11zV9AjN4s/f2ssEwf3BNxIZ34omPKFVVf/bNMpk+qbSXVtC80NwiAiPYB/AkNwr1N+q6p/9+Y9hNut+itVHZu0zOO4Xa7B7XJdoqoTRWQYsARY5s37QFUvS9Outam3V2zh/je/YOqYAs4/ZGjat9fN8sYZY5rQdY8QN9ywM6BUraoKfv5zKCiAYcPc1kut3V0tEKg9cpzjQDQKmzfvnBYM1m7NFAxaayZjTKbZLCJDgYuBY1q47FxglIgMB9YD5+DmUEr2HHCviASALNzucXftXpVNV7LDS8atSe9ve3Epry7ezCEjenPTqWPolZcFuLlEeuYGCfqtC7sxuyqVQRiAy4HFqnqqiPQDlonILFWNAg8D9wK1ujqr6tlJ2/gdUJo0+wtVnZiO/Wkvq7ZU8IvnFjF6z3yuP3nftHdJC/p9hCyXkjGmCV03qLRuXcPTS0rg//7PfZ2dDUOGuAEm79FLxM2TNGhQ7eDQrmqsNVNZmZufCdyAUm7uzpHmsrKsNZMxpqP7M/ASMAL4OGm64HZlG9HYgqoaF5ErgJdx72Y/pKqLROQyb/79qrpERF4C5gMO7h3vhenZFdOZJBylrCpG1EvGDbB8cznXP7OA9dur+P6UkVxw6NCa0d2y/D565ATxWf4kY3ZXKoMwKJAvbqSkG7ANiAOo6lte66MGecv8H3BsWmrfAZRWxbj6yfmEgn7uOGt8mwR78rLtmsMY07SuG1QaMgTWrq0/fc894a67YM0ad/6aNe7j7bchHGZCdblAwA0sVQechg51n4cPh8GD6yfxbom6rZlU3dZMlZVuyyZwA0vVScCtNZMxpoNR1T8CfxSRP6vq93dh+TnAnDrT7q/z/k7gzt2qqOlSwrEEZeFYTf4kVeW5eRv4/avLyQ8F+NP0/Zk0pFdN+bzsgHX7MKb1pDIIw73AbNwuz/nA2arqkJojgc2quiJp2nAR+QwoA25U1bd3qeYdQNxxuPHZhWwqDfOn6ftT0H03rjVSlOX32QiXxphmdd1fSjNn1s6pBG53sxtugKOOch/JVGHzZj574w0miewMNq1ZA598AuXlO8uKuF3nqoNM1QGn6kdeC0dnEKnfmimRcLdZUuLWzedz65+X5wa0gukbUrQrcdRBVd1ntNb7imgFCSeBow5xJ17z/NSSp7jj3TvYUL6BAfkDuObwa/jGvt/AJ76ahyD4fe5JumaaCIK06NmYjm5XAkrGtDZVpTwSpyqaqJlWGY3zmxeX8dKiTRw0vDe/Om0Mvb3ubiLQPRS0Lh/GtK5UBmGYCszDbW00EnhVRN5W1bIU1n8u8O+k9xuBIapaLCIHAM+KyJi662qtAR0SjtbbmZao2lHBgo8bHyz18WVRPlob58L9svBtXsKCzY0WbTV+nzT4R9sdXSF5fVfYR+ga+2n7mJquG1SaPt19TnX0NxHYc09Kx4+HMWNqz1N1u6qtXr2zhVP165de2pmUu1q/fvVbN1W/79WLlFQn+E6uQywGW7fuHGmuOldTXp4bZMrK6jKtmRoKBNUNCtUNBiU/JzSBU90qTNz1CYKiiAixRIwNZRtAqAkSiQizl83m+tevpypeBcD68vVc99p1OOowbfQ0FEW9W+TVr6ufBdnZMSjFZ5/Phw83IJUctEoOVMWdOMWVxfWmWwDLGNMVxL1k3HFn5+Xeyq8quP7pBXy5vZJLjxrBRYcPq+nu5vcJPXOCBCx/kjGtLZVBGC4Gblf3x9JKEVkN7AN81NSKvfx6Z+KOCgqAqkaAiPf6ExH5Atib2l2yW21Ah+07orW61bbUgo/fZ9zkQxuc98L8jby6djH/N3kQPzhxdINlWlso4KdHbuvfpO4Kyeu7wj5C19hP28fUdN2gEriBpenT3RY/Gze6ybF3hQj07u0+Djig/vyystpd6aof77wDTz5Zu2zPnrUDTsmtnfr1azwoJOIGjbKyak+rqHBHm6uWPNJcVlbKeaFmLZjFDa/fwLrSdQzpMYSZx81k+rjpKS3bUk21DlK0wdZB1c+qStyJNxgIqhW4AQQ3EJNwEsSdOFEnSiwRI5KIEEvEiCaihBNhIvGI+0i4z+F4mDWb1tBrQa+aadXzH1/0eE1AqVpVvIob/3cji7csJtufTdAfJOgPuq99QbICWWT5ssjyZxH0B8nye6+T5iVPT3748BH0uyf86s8qoYlawaqEJtge3l4zzSvcqgEsQRqd31ig6rFFj/GLN37Bl6VfMrjHYG495lbOHXcuihJLxGr2KZlqnfdpnu/UaXFf933CSVBcWZxy+Za8Tw5APrv0We587042lG9I+/fPmM6kMhqnIrwzGbeq8vznG/ntK8volh3gj+dOYvKw3jXlQwE/3XMCFkg3Jj1SGYRhHXAc8LaIFOCO6rYqhXUfDyxV1aLqCV6i722qmhCREcCoFNfVoSxYX8ptLy5h8tBe/Pi4UW22XculZIxJVdcOKrWV7t1h3Dj3UVdVlRtwSm7dtHYtfPYZPP/8zhxK4OZPSu5GVx18Gj688ZHqGmrNVFzsrlfVbcFUnQS8OjdTnfXMWjCLS56/hMqY21VwbelaLnn+EoBaF7ZNBYKq3yecBAn1Hk6iJqBTFa+iOFLMu2vfdQM1iUjtgI0TIRqPEolHiCaiNe+jiSiRhDut+lETAEpaPhwPE0nsfE4OEsWc2C79WfnCfRKEUCBEdiC75jOqa0dsB/9a8C9ijhusam1BX7Be4Cnoc98nIgm6f9F9Z0DLF6x5Xau8P9hwcMt7Xb2+gC9Q81y93aAvuPO1P0hAAjWvgxJEfFIrQPX88ue58Y0bCcfDAKwrXccl/72Er3Z8xdjEWFaXrN65c3Xbkte91tPkl1rrYrAmkLiL893N1XmfND+ucUrCJY3+XVqyrsbmP7v0WWa8PqMmWNnY988Ys5PjKGXhGJH4znNoVTTBb15ayosLN3HgsF786rQx9OnmdisXoFsoQG6W/SwyJl1SGYQBuAV4WEQW4H41r1XVrQAi8m9gCtBXRIqAX6rq37zVn0Ptrm8ARwE3i0gcSACXqeq2tO5kK/uqPMy1T85nj/wQvz5jXJu1oAwF/dZa0xiTMvv11N5ycmCffdxHXdEofPll/VZOy5bBq6+6AaJq1SPVJXWp6w1uwGjQoJ2JvLOy0GBwZ9erRBytKEW3b3WDQCgaykbzctHsbKI+uPqVq+sFSypjlVz+wuXM3zSfSDxCVbyqplVP3cBONB6tFeSpDgRVl6kVZPlg1z7GkN8N6mQHssn213/uldNr53tvWnUgqGbZhubXXZdXfvWC1UyYPIFQIETAt/Ou9kF/PYj15evr1W9g/kA++p7bcltViTmxeq2iqltKJQfIYokYUSdKNB4l5tQpn3CnRePusjXlE7VfF28rJjsrm1giRkW0glgiadtO/fK7HGRrQnVQqrqF1tbKrSQ0UatMOB5mxuszGJo7lJzlObXmpdJqoLle/83O34WWCVU7qshZubOuza0jlcwEddcxf/P8eoHIylglN7x+gwWVjGlANO52d3OSWh6u2lLBjKcXsLa4ku8dOZyLDx+O3xvNzSdCj5wgWQG7gDIm3ZobhEFVNwAnNrLsuU2s96IGpj0FPLWrdW1v4ViCa59cQFUswR/PnZSWrmgNEbABCowxLWJHjA4muduSBnzo8CHosMHo0Ycn5QVyg0Fs2ABr1iJr1+Jbsxbfui/xrV1L4J13kHCY8dXr9PuJDyggNmQQkcH92T6kgA0D89ncN5dNPX0UJyoojpRQHNlOcXgbW6u2sS2yneLIdkpjFY3WtTRSyh3v3QFAli+L7EBW7SCMP5uQ97pnVvda07MDbtAmlPR++6ZShg4d7C5XZz07Az111h3IJsuXtfNCvI26LJQEt5PvC7kDmScFR6477BquefkqqtgZmMmRINcddk1NriuBmlZAebQwafsuWDR3EWMOHNN8QY+q7gxYJQWc6gbAqgNddYNSjQXHqpePOTFmLZjV4LZjTow+WX3I75Zfqz7N1rm51JjNzk5hGw3Uwx/x0y27W0rr2NVtNNaybV3pumbXZ0xXUxGJsyMSrzXtv/M3cMdLy8jLDnDvebW7uwX9PnrkBGsCTMYY0xGoKre9uJTFG8u44xvjGbnHLqbo2AU5WX47JhpjWsSCStViMbcrms/nBibqPrPzgi/hJFCSgj/Jz9TuBlad8NlBcXC8146XKNprGZQ0DdiZyyaZSM00byvQO4D03gudNJLSaBlbw9spjpZQXLWN7cXrWbN2BYn4drZWFbM1XsZW+YzNWR8RDgLbvUeSXvEgfSWPvtm9GJPXn94DD6BffgEPLniUEqqoqz/5vDT1H2T5gvjEl1JAp253o5rpKGviUYbnZdee4YA6IDUxmrj32OH25oOd4ZsUzn9KI9vX+t2eGl1GFScSpfyLxbWni/CNV9fT8zmHG4+GdT1gSCnc+qbDcbKe8sCieutT8ZJgi29n/UXqPLy759XdEn3eziaX8dUpU72MgBOPU1HyFZLUrVGqlwckef0104QAEPBlk+cLQZY3vWb9Umvfkz+7VKYXrilstEXXLWNuaVEQrD21NGC3Kxpr/Takx5C0bteYTJJwlNKqGLGkJLnhWII7Xl7GC/M3csDQXtwybWd3N3AvnLqHbKRUY0zH86+P1vHSwk1878jhHD26X5ttV4A86wZsjGkhO2oAET+U5PtwEpU4iRhOLIbjJHDiMdRJ4CTiOCgoRGIRvti0uP5Kqi/sFfDvvEgXEcTnR5ITFiNuLAAhgA/x++uNsFUVD7M1vI2t4W1sCW+jOJL0us7ztkhJg60g/OKnX6g3fXr2pl9oMMOye9Mv1Ju+mkNBhVJQHKFgUwUDikoo+GIzuWs34N+2HSgB3Jw28T69mDAowqWnQGVSDvDcKNzxWpzRvk/d3Ezqfj47X1dHwNzX0sj05GWythQzqG8vL99T7XUJddbd4Lpqr1OoP81dRpG6dU0uQwPbqVO+Z1kZ/fK71d/nN9/kW+EE3/os+S+RQJf+kYKFayDgd0fuCwTA70frvvb73Pl+PxoIuOV9fghUz/ejvp3lNJC8XAD1CfgD4PehPh8EAhRv2UZ/jaN+973j27msI7jb9/lwknp+JHcbqQl2qrrlq6d7r9XnJkHHS4auPjdgpUJNkKpmOZ8PRx1mRA/mmtjTVCZdz+XGYEbsEJx4jIriDbUDkHXyfKlqrSAZ7NxWrQBhnUChm9YpKYeS1CmiSeupzq9UXSD5K+Z9lx0nwY4dJfXqUhOoS65DUoL45HXUWq7uehBu9B/Dz2L/rPdZzcw+GWOMGzwqq4rV+oqu2lLBDc8sZPXWHXzniOF854id3d0E6J4TJBS0JLTGmI7ng1XF3Pu/lRwzuh/fPmJ4m247NzuAz1opGWNayIJKQNQPxTlKTqBbrRGqAtUjVal3Peg4+MqW0m3YqNqBBMdxH/G4+z4eh0TCnZZIQNzBSUQpje1ga6SYrZFStkS2URzZzpbIdrZGtlMcKWFLdLs3bRs74vVbBgF0C+TRN9SLvqE+DMsfzOR+E9332b3pm9Obvl7gqE+oN+uLKhk7sj9AzahgcW/kNKf6glnddjPF/iAVviyyK6OEijbhX7eOwLoi/GvW8a3HHkMcuOG4na1vZr4O0xdUwUc3t9rfod5ps16LnTqPdiyTF40ioVD9cuFwg/smVVXIO+94/x/iO5+rX8daP49RtYYHp21AUoCrweeWzKv7us77vZ9+mZ4j6v+fOm/1y6w7JcCQHt29mKFC9TDgySOj1QS6vAmO47Xw05pYY72gY3WwMGk5TR59TZ2d66spv/O9eu9FHaqrlldZRd+c7J3d1hp41nrb3fm+weWS5wlc8s6H5O/dwPevbA58P5U/rDGdk6pSFo4TjtXOzzZnwUZ+89JScoJ+7jl3IgcP71Mzz+8TeuYELQGtMaZDWldcyQ3PLGREv2784tT98LXhSJQikJdlwXZjTMt16aDSrAWzuOH1G1hXuo7++f2ZccQMztz3zPoFk1pZIOImxcbNdbK1civFlcVsrdzKlsotFFcWs6VyC1srt9Z6FFcVu0Pd1+ETH71DveiX04c+od5M6jmEPtm96ZvVk37ZveiT1ZN+wR70zepJn2APcvzZVLe3qPuc0ARxdXAEEtEEqg7lO0oQvzu0e3YwRH5WN7J97shdAZ8fv7iPmpYdeUC/wTDpwJ2VfPttpi9Yz/QFdSrfvz+89FLLgjNNPAoXL2bK2LFtlhdpd8xdtIgpYxro9nTQQbC+flclBg6Ejz5qeqXVgcnqIFNy8KluECrVefE4i9euZb+CghYv12z5WKz2vHA49eV37GD6Aur/n6KCwU895QZz6/6fSlb3/1zd58bmtaR8Y3m6kub1jsfJqk6C31R9Gtp2KvUHiEQa/qzEciqZriuWcJNxJ6qDzrgtln77yjKe/3wjkwb35JbTx9Ivf2d3t+yAj+6hoN2FN8Z0SJUx5ZYnPifgE+48a3ybj0bZLXvnwDPGGNMSXTaoNGvBLC55/pKaUc02lG/gmlevIRwPc8igQxoNDq3dvJaqhVVsrdxKaaS0wXWHAiH65fajb25f+uf3Z3zBePrk9qmZlvzoFeqF35faXQF1HOJOnHg8SiIRR52E29XHa90QlABZ+AkRIEsCrC9ewfDewwk44FPci/qE4w6qiuM9vBYyXvclVHcGz6q79F11FVx/vZtzqlpODsyYAb17J1WwThe8VN4nd2MTcUe8a8k66n1IKZRPZR3JJ9WG3jsOVDSQxPwnP4Ebb6zdYikUcqeXlze93mQ+H2RlNV22oWBFA++/WrmS/fbaK6WyLVnvbpVtIvj21t//7gbskv9O6X6drG7roYZee/vywerVTBk+vN70Rl/vimOOcZPy1zXEciqZrmmHl4w7+Ru8ZusOrn9mAV9s2cHFhw3ju0cNJ5DUnbRbdoA8G83IGNNBJRzlrwsiFJUo9547iQE9c5pfqBX5RMixLsHGmF3UZX9h3fD6DTUBpWpV8SqufvXqBsv3CvWib25fciSH/frtVysw1C+3H31y+9S8zg3m7nKk31E3cJRwEiQ0UZNXRlH8Pj9BX5C8nB41o4f5fX4CvkDt1kYeWbGWrCHDa2+goW571a/rduWrfv7mN92L4jvugI0b3RZKP/sZnHJK7SBQ3X1uKOdN3SBE3fehUNPraOk6U11HXc0FSDZsgMGD68+//HLo0wd++Uv48ksYNAhuvhnOOced31RQI9V54P5tGnufHKgDt8tZ9+6plW3Jeht6n+p6r7wSfv7z+sG3K6+sHbBL/lv5GspT1EAruaaWa63X1dspKnJbodWdvjuv6067/Xa47DKoTDpe5ebCzJkY09Vs3xElmqh9PHl50SZum7OU7ICPe86ZyCEjdnZ3E4EeOUGyA3axZIzpuO5/8wsWbHW4Zupo9h/aq823b62UjDG7o8sGlZoajvuek+6pCRT1y+1H75zeBP1ultzdHe1J1R0Rrjpo5HgX29VJgQMSIDuQTV4wj2x/NgF/oCZolGqLpiYlX3j7W7C+H//YfaTTihVuwCoTiLittRpy0UXuo6MIBKBf240ckpKf/cz9W19/vRt8GzwYfv1rOO88ePNN2Hvv9q5hanw+yMtL7zbOP9/dzg03wLp1bgulmTNh+vT0bteYDiQcSxB3tFZAKRxL8PtXl/PcvA1MHNyTW04fwx75O29MBHxCz9wsGxrbGNOhvbxoE4++v5ajBwX4xgGD2nz7fp+QY7mUjDG7ocsGlYb0GMLa0rX1pg/MH8hZ+521W+t21CHhJIg7cRx1ahLuAghC0BckFAiRHcgmy59VK2jkE0searoAETcoYoGR1NhnZbooVaU8EqcqWjsZ97riSq5/ZgErvqrggkOHcunRI2p1dwsF/XQP2Z13Y0zHtmRjGTNfWMLEwT05d3SkXerQzboGG2N2U5c9isw8bmatnEoAOYEcrjviupSWTw4aJZwECDVd1Xw+H9n+bPKz893WRj6vtZHP32A3NWOMMcbUFveScced2t1/X1m0idteXErQ7+Ousydw2Mi+NfMEyA8F7a67MabDK66IcM2T8+mVm8VtZ45j/ZJP2rwOQb+PkOVSMsbspi4bVJo+zr3r39job6rq5jbyuqopiqriOA4V0QqCviBZ/ixCgdDO1kZefiNrbWSMMcbsusponIpw7WTcsYTymxeX8vRn6xk/qAe3nj6Wgu47u7v5ROiZGyTot3OwMaZji8Ydrnt6AaVVMR68cDK987JoYPiStMvLtoCSMWb3ddmgEriBpenjplMeKWdt6VqCviAVkYraSbGDebWSYm8MbGRU71HW2sgYY4xpZY6jlIVjROK1k3F/ua2SX38U5svy9XzrkCF8/+iRBJKCR1l+Hz1ygvgsf5IxpoNTVe58eRnzi0qZefpY9i7Ib5d6ZPl9NoiBMaZVdOmgUrXsQDZDug9JOSm2BZSMMcaY1hWNu93dnDqjXb6+ZDO3vrAEUeV335zAEaP61pqfm+UnPxRsy6oaY8wue+LjImZ/voGLDxvG8fsVtFs9uoXsMtAY0zrsaAI1LZGMMcYY0/YqInF2ROK1pkXjDve8voInPyli3MAefGtEpFZASQS6h4KWD8QYkzHmrt7G3a+t4MhRfbnk6BHtVo/sgM+6ChtjWo0FlYwxxhjTLhKOUloVI5ao3d2taHsl1z+zkGWbyjnv4CFcPmUkSz77sGa+3yf0zAnW6gJnjDEd2frtVVz/7AKG9MnlptPG4GvHng824psxpjXZEcUYY4wxbS4cS1BWFUPrTP/f0q+49YXF+ES486zxHLV3v1rzQwE/3XMC1hXdGJMxdkTiXPXE56Dw22+Ob9egTijot4C8MaZVpfWIIiInicgyEVkpItc1ML+HiDwvIp+LyCIRuTjVZY0xxhiTeVTd1kmldQJK0bjD715ZxoynFzCsTx6PfvugegGl/FCAHrlBCygZYzKGo8qvnl/MmuId3HrGWAb1yv3/9u48Tq6yzvv+59vV1Vs6C2uEBCRgWAKGLYAOA0YQCagQFGdAH1F0ZLgFl7lFBLmfkbnFEcH9AY2oTHRGZWQ1IGPApUEFNGHJCoEQtpBIJPvSne7q+j1/1OlOVaU7qU66uqu6v+/Xq1+pc52lftfpyrm6fuc61zVosQj3UjKz/le2q4qkFHAzcAawHJgjaVZELM7b7DJgcUS8R9I+wBJJPwU6S9jXzMzMqkhHZ24w7s5sYf+kFeta+cLdC3h65UYuOOEALj/tTQXjfUi5R96a6vxlyMyqyw//8AIPPfs3PvOOiZw0Ya9BjaWxLkXKs2SaWT8r519nJwJLI2IZgKTbgHOB/MRQACOVu+XYDKwBMsBJJexrZmZmVWJzMhh38eNuLUtW8aX7ngbghvdN5m2HFfZOSqdqGN2Yxl+DzKza/O6ZVfzojy/wrsn7ccEJBwxqLAJGODFvZmVQzivLOOCVvOXl5JJF+W4CZgErgJHAP0ZEVlIp+5qZmVmF68wGG1o7aC8ajLujM8tNv1vKbXNe4Yj9RvLv572Z/cc0FmzTWJdiZL3HTzKz6vPsaxv5t3sXcdS4UVw17fBBv4411ddS415KZlYG5Uwq9XTVKr5BeSbwFHAacAjwoKQ/lLhv7k2kS4BLAMaOHUtLS8suhluaTZs2lf09+ks1xQrVFa9jLZ9qireaYjUbDG0dnWxo6yCKWvAV61r5P/csZNGKDfzDlPF88rSJ1NXmPe4GjGpM05BODWzAZmb9YO3mdq68Yz4jG9J89X2TC65vg0GCEXW+nppZeZQzqbQcyO/nOZ5cj6R8FwPXR0QASyW9ABxe4r4ARMQtwC0AU6ZMialTp/ZL8L1paWmh3O/RX6opVqiueB1r+VRTvNUUq9lAigg2bs3Q2t653bqHn/0b//e+xWQj+Mp738xph+9bsD5VI0Y3pgvGVDIzqxaZzixfuHsBqze18/0PHc/ezfWDHRLN7vFpZmVUzqTSHGCipAnAq8AFwAeKtnkZOB34g6SxwGHAMmBdCfuamZlZhckkg3FnigbjznRmubnleX7255c57A0j+fceZkGqr61hVEPaj2iYWdX6xoPP8sTL67j2nElM2n/UYIdDjUSje32aWRmVLakUERlJlwOzgRRwa0QsknRpsn4G8CVgpqQF5Hq7fz4iXgfoad9yxWpmZma7r62jkw2tHds9r/7X9W1cc88CFr66gfOPH8+nT5+43eMgI+prPdW1mVWde558lRtnL2HFulZGNtSyoS3DB086kLOO2m+wQwPcS8nMyq+sf71FxP3A/UVlM/JerwDeWeq+ZmZmVpk2JbO7Ffvjc6/zb/ctItMZ/Pt5R3H6EWML1kswujFNfa3vpJsNdZKmAd8md9P4hxFxfdH60cB/AQeS+57ytYj4j2TdrcC7gVURcVTePtcCHwf+lhR9IfkegaSrgY8BncCnImJ2f9bnnidf5eq7FtDakXvUd0NbhhrBm/Zt7s+32WWpGtHosZTMrMw8YIGZmZntsohg/ZaO7RJKmc4s/9/vnuOzt8/jDaMa+MlHT9wuoVRbI/YaUe+EktkwICkF3AycBUwCLpQ0qWizy4DFEXE0MBX4uqS6ZN1MYFovh/9mRByT/HQllCaRG0LjyGS/7yYx9JsbZy/pTih1yQZ8/6Fl/fk2u8y9P81sIPhKY2ZmZrukMxus29JOJhv8euFKvteyjNc2tLH3yHoaamt4ZW0r7ztuHJ9+x8TtEkcN6RSjGvxYhtkwciKwNCKWAUi6DTgXWJy3TQAjlbswNANrgAxARDws6aA+vN+5wG0RsRV4QdLSJIZHd7ciXVasa+2x/LUNbf31FrssnarxDJpmNiDcU8nMzMz6rKMzy5rN2xJKX7n/Gf66oY0A/rZxK6+sbeX848Zx5bTDCxJKAkY1pBndmHZCyWx4GQe8kre8PCnLdxNwBLlZnxcAn46IbAnHvlzSfEm3StqjD++3W/Yf09hj+dhRDf35NrtkRL0TSmY2MNxTyczMzPqkeEDu77Usoy2z/fe+Py5dzefylmskxjSlSad8T8tsGOopi1w8rv+ZwFPAacAhwIOS/hARG3Zw3O+Rm/wnkn+/Dny0xPdD0iXAJQBjx46lpaVlh5XI964DO5m5AdrzLn91NfDuAztZMLdvHaJaN2/q8z69EbnxlCrRpk2b+nSOq9FwqCMMj3q6jqVxUsnMzMxKtnlrhk1F4yf19qhHfnldqobRjWlqKvSLjpmV3XLggLzl8eR6JOW7GLg+IgJYKukF4HDgL70dNCJe63ot6QfAfX14PyLiFuAWgClTpsTUqVNLrE5u0KdJebO/jR3VwP+aejDTdmHmtwVzH+XNU97a5/16sueIuopN3re0tNCXc1yNhkMdYXjU03UsjZNKZmZWcXY2Q1DedicAjwH/GBF3DGCIw05EsKE1Q1umcFDaFetaSdWITHa7DgDdj4A01aUY2ZAekDjNrGLNASZKmgC8Sm4Q7Q8UbfMycDrwB0ljgcOAHY56LWm/iFiZLJ4HLExezwJ+JukbwP7ARHaQnNpV048dx/Rjx7F2czvtnaU8qVde9bU1FZtQMrOhyUklMzOrKHkzBJ1B7k7zHEmzImJxD9t9FejXKaJte9lssK61g46iL0xPvLSWq+5aQKoGJNHRuS2x1FBbwyemHszoxrQHizUzIiIj6XJy1+wUcGtELJJ0abJ+BrnH12ZKWkDuKa7PR8TrAJJ+Tq5z0N6SlgNfjIgfATdIOobco20vAv+cHG+RpF+QGwg8A1wWEYVZ8SHIM76Z2UDzVcfMzCpNKTMEAXwSuBM4YWDDG14ynVnWbukgG4U9ke5OHvkYP6aRr314CotXrO+e/W3sqAYuO+0QLjzhQGp9x9zMEhFxP3B/UdmMvNcrgHf2su+FvZR/aAfv92Xgy7sUbBVqSKd8zTWzAeekkpmZVZqeZuw5KX8DSePIPeZwGk4qlU3xgNwAmWyWb//mOX4xdzlvPXgvvjT9SEY2pDlwz6bucUQaalOMaqz17G5mZgNEuJeSmQ0OX3nMzKzSlDJjz7fIPRbRuaPExe7M6rOrqmmmkB3Fmg226520uSOYMW8rT6/JcsYba3n/IVt4ceHcgm1qJMoxFnc1nVeornirKVaornirKVarbg11qYqd8c3MhjYnlczMrNKUMmPPFOC2JKG0N3C2pExE3JO/0e7M6rOrqmmmkJ5ijQg2tGVo6ygceuSl1Zv5t9vnsXJd8H/edQTvOXr/gvUSjG5MU19bnvGTqum8QnXFW02xQnXFW02xWvUS0Fznr3VmNjh89TEzs0qz0xmCImJC12tJM4H7ihNK1nfZbLC+tWO7GYweW7aaa+5eSDolvvvB4zj6gDEF62trxJimOt8lNzMbBE31tdT4+mtmg8RJJTMzqyglzhBk/SzTmWVdawed2W2PvEUEt815he/89jkO2aeZG98/mf1GNxbsV19bw+jGtMdPMjMbBBKMqPMMm2Y2eJxUMjOzirOzGYKKyj8yEDENZVsznaxv7SB/CKX2TJYbZj/DvfNWMvXQffjiOZNoKnq8YkR9rQeGNTMbRCPqPCmCmQ0u/yVoZmY2jG1pz7CxLVNQtmZzO1fdOZ95y9fz0ZMP4uOnHkxN3pcWAaMa0zSkfXfczGyw1Eg0uZeSmQ0yJ5XMzMyGqWzEdgmlZ1/byOdun8/aLe1cN/0ozpg0tmB9jcQeTWlqUzUDGaqZmRVprncvJTMbfE4qmZmZDTMRwbotHeQNnwRAy5JVXDtrMc0NtXz/Q8dzxH6jCtbXpXLjJ3lAWDOzwZWqEY3upWRmFcBJJTMzs2GkMxus3dK+3YDcMx95kRkPLePI/Udxw/mT2bu5vmC/xroUoxrSAx2umZn1wOPZmVml8NXIzMxsmGjPZFnX2l4wIHdbRyfX/eppHlz8GtOOegNfOPtw6mu33f0WMLIh7TviZmYVorZGHtPOzCqGk0pmZmbDQGt7JxvbOsh/4m1tW5ZL/+txnlm5kcvefggfessbC8bnqJEY3ZimrtbjJ5mZVYrmBn+FM7PK4SuSmZnZELexrYMt7Z0FZYtWrOe6P2+lIzq48f2TOWXiPgXr08n4SSmPn2RmVjHqUjUFvUnNzAabk0pmZmZDVESwvrWDrZlsQfnsRX/luvueZlQdfO+DUzhk3+aC9Q3pFKMaPKuQmVmlcS8lM6s0viqZmZkNQZ3ZYN2WdjJ5A3JnI/hey/P85NGXOO7AMXzo4K3bJZSa62sZ4QFgzcwqTn1tDemUH0c2s8riq5KZmdkQ057Jsnrz1oKE0uatGa68Yz4/efQlph+zP9+58FhG1m3riSTBmKa0E0pmZhXKM76ZWSXylcnMzGwIaevoZENr4YDcK9a1csXt83jx9S1c8c5DOf/48QWPtqVqxJjGNLW+A25mVpEa0ilfo82sIjmpZGZmNkRs2pph89ZMQdkTL63lqrsWkI3gWxccw4kT9ixYX1+bG5Db4yeZmVUm4V5KZla5fHUyMzOrchHBhtYMbZnCGd7uefJVbpi9hPFjGvnaPxzNgXs2FayvkRjTVDeQoZqZWR811KU8E6eZVSwnlczMzKpYTwNyZ7JZvv2b5/jF3OW89eC9+NL0IxnZkO5eL2BUYxp/RzEzq2wCmuv8lc3MKpevUGZmZlWqozPLui0dZGNbQmlDawfX3LOQv7ywhg+ceCCXn/amgjvcud5Jac8gZGZWBZrqa6nxHQAzq2BOKpmZmVWhngbkfmn1Zj57+zxWrmvjmncdwTlH71+wT10qN36Sv6CYmVU+CUbUpQY7DDOzHXJSyczMrMps3pphU9GA3I8tW801dy8knRI3f/A4jjlgTMH6xroUo/IegTMzs8o2oq7WkyiYWcVzUsnMzKxKRAQb2jK0dXQWlN025xW+89vnOGSfZm58/2T2G93YvV7AyIY0jb7bbWZWNWokmnzdNrMq4AEVzMzMqkA2G6zd0lGQUGrPZPny/U/zrd88x6kT9+GWi44vTCgJxjTVOaFkZhVB0jRJSyQtlXRVD+tHS7pX0jxJiyRdnLfuVkmrJC0s2udGSc9Imi/pbkljkvKDJLVKeir5mVH2Cvaj5nr3UjKz6uCkkpmZWYXLdGZZvbmdjs5sd9maze1c/rMnuHfeSj568kF85X1vpilvhqDaGrHXiHrqat3Um9ngk5QCbgbOAiYBF0qaVLTZZcDiiDgamAp8XVJdsm4mMK2HQz8IHBURk4Fngavz1j0fEcckP5f2W2XKLFUj3wwws6rhx9/MzMwq2NZMJ+u3FA7I/dyqjVzxi/ms3dLOddOP4oxJYwv2aahNMarRd7nNrKKcCCyNiGUAkm4DzgUW520TwEjlLl7NwBogAxARD0s6qPigEfFA3uJjwPlliX4ANdf7K5qZVY+y3r4soYvr5/K6pC6U1Clpz2Tdi5IWJOvmljNOMzOzSrSlPcO6ooTSQ0v+xsd//DidEXz/Q8dvl1Bqrq9ldFPaCSUzqzTjgFfylpcnZfluAo4AVgALgE9HRJbSfRT4n7zlCZKelPSQpFN2IeYBV1sjGtLupWRm1aNsafC8Lq5nkGs05kiaFRHddyMi4kbgxmT79wD/EhFr8g7z9oh4vVwxmpmZVaLeBuSe+ciLzHhoGUfuP4obzp/M3s313eslGN2Ypr7WX0bMrCL1lOmOouUzgaeA04BDgAcl/SEiNuz04NI15Ho1/TQpWgkcGBGrJR0P3CPpyOJjSboEuARg7NixtLS0lF6jPJ3Z2K4yfdG6eRML5j5KqkY9nqihYtOmTbt8jqvFcKgjDI96uo6lKWffylK6uOa7EPh5GeMxMzOreNlssL61g/a88ZPaOjq57ldP8+Di15h25Bu4+uzDC+5kp2rEmMY0tSmPn2RmFWs5cEDe8nhyPZLyXQxcHxEBLJX0AnA48JcdHVjSh4F3A6cn+xIRW4GtyevHJT0PHAoUPAEREbcAtwBMmTIlpk6dukuVW7u5veC63VcL5j7K8SedzB4j6na+cRVraWlhV89xtRgOdYThUU/XsTTl/OuzlC6uAEhqIjfw3p15xQE8IOnx5A6CmZnZkJbpzLJmS+EXk1Ub27j0vx7nN4tf4xNTD+HacyYVJJTqa2vYa0SdE0pmVunmABMlTUgG374AmFW0zcvA6QCSxgKHAct2dFBJ04DPA+dExJa88n2SJyeQdDAwcWfHGmwjPJaSmVWhcl65Suni2uU9wJ+KHn07OSJWSNqXXNfXZyLi4e3epJ+6rJaqmrrAVVOsUF3xOtbyqaZ4qylWq3xbM52sb+0g8lrKRSvWc+Ud89nS3smN75/MKRP3KdinqS7FyIb0AEdqZtZ3EZGRdDkwG0gBt0bEIkmXJutnAF8CZkpaQO67xOe7hsKQ9HNyM8LtLWk58MWI+BG5cZjqyX1fAHgsmentVOD/SsoAncClRd81KorAs3WaWVUqZ1KplC6uXS6g6NG3iFiR/LtK0t3kHqfbLqnUX11WS1VNXeCqKVaorngda/lUU7zVFKtVti3tGTa2ZQrKZi/6K9fd9zR7Ndfxw4uO5ZB9m7vXCRjVmPZgrmZWVSLifuD+orIZea9XAO/sZd8Leyl/Uy/ld1L4FERFS9UM5ZGUzGwoK2c6vJQurkgaDbwN+GVe2QhJI7tek2tcFpYxVjMzs0Gxoa2jIKGUjeDm3y/lX3+5iKPGjWLmxScUJJRqJPYYUeeEkpnZEOHruZlVs7L1VCqxiyvAecADEbE5b/exwN1JF9Za4GcR8etyxWpmZjbQIoJ1WwoH5N68NcMXZy3iD8+9zvRj9ueKMw8jnTdWUjpVw5jGNDW+o21mNiQIaPZYSmZWxcp6BdtZF9dkeSYws6hsGXB0OWMzMzMbLJ3ZYO2Wdjqz2wZQWrGulStun8eLr2/hinceyvnHjye5uQJAY12KkfW1BWVmZlbdGupSfvTNzKqa0+JmZmYDqD2TZV1re8GA3E++vJar7lxAZwTfvOBoTpqwV/c6Ac0NtTTVuck2MxtKBDT72m5mVc5XMTMzswHS2t7JxraOgqlQ73nyVW6YvYTxYxr52vuP5sC9mrrXSTCmsc4zApmZDUFN9bV+nNnMqp6TSmZmZgNgY1sHW9o7u5cz2Szf/s1z/GLuct5y8J5cN/0oRjaku9fX1ogxTXV+LMLMbAiSYESdB+g2s+rnpJKZmVkZRQTrWzvYmtk2IPeG1g6uuWchf3lhDReeeACXn/Ymamu29UZqqE0xqtHjJ5mZDVUj6nyNN7OhwUklMzOzMunMBuu2tJPJG5D7pdWb+ezt81i5ro1r3nUE5xy9f8E+zfW1jPBMQGZmQ1aNRJN7KZnZEOFBGszMrOJImiZpiaSlkq7qYf0HJc1Pfh6RVHEzhrZnsqzevLUgofTYstV8dOZcNrVluPmDxxUklASMbkw7oWRmNsQ1eyZPMxtC/JermZlVFEkp4GbgDGA5MEfSrIhYnLfZC8DbImKtpLOAW4CTBj7anrV1dLKhdduA3BHBbXNe4Tu/fY5D9mnmxvdPZr/Rjd3bp2rEmMY0tSnf6zEzG8pSNaLRvZTMbAhxUsnMzCrNicDSiFgGIOk24FygO6kUEY/kbf8YMH5AI9yBbMD61o7u5Y7OLDf8egmz5q1g6qH78MVzJtGUN4V0XaqG0Y1pzwBkZjYMNLs3qpkNMb6qmZlZpRkHvJK3vJwd90L6GPA/ZY2oBBHBhtYM2dj2uNuaze1cded85i1fz8UnH8Qlpx5MTd4jD011qYIZ38zMbOiqrRENafdSMrOhxUklMzOrND112YkeypD0dnJJpb/vZf0lwCUAY8eOpaWlpZ9C3F5nNgigdfMmFsx9lFc2Zrnpya1saA8ueXMdJ45YxaLHV3Vvn5IY7CE1Nm3aVNZz0p+qKVaornirKVaornirKVYrv+YGf/Uys6HHVzYzM6s0y4ED8pbHAyuKN5I0GfghcFZErO7pQBFxC7nxlpgyZUpMnTq134Pt6MyybktHdw+lBXMfZc3IN3HD7xfRXF/HDy6czBH7jerevkZiTFOadAWMn9TS0kI5zkk5VFOsUF3xVlOsUF3xVlOsVl51qRrqa91LycyGHieVzMys0swBJkqaALwKXAB8IH8DSQcCdwEfiohnBz7EnJ4G5L5vWQf3LJ3PkfuP4qvvm8w+I+u7t0+nahjj8ZPMzIYdz+xpZkOVr25mZlZRIiIj6XJgNpACbo2IRZIuTdbPAP4V2Av4bjItcyYipgxknJu3Zti0NdO93NbRyXW/epoHl3Yw7cg3cPXZhxeMndGQTjGqwdNIm5kNN/W1NdTVDn7vVDOzcnBSyczMKk5E3A/cX1Q2I+/1PwH/NNBxJe/NhrYMbR2d3WWrNrZx5R3zeWblRt47Mc2V50wqSB6NbKgtmPHNzMyGD8/4ZmZDma9wZmZmJcpmg3WtHXR0ZrvLFq1Yz5V3zGdLeyc3nD+ZPTYs7U4oSTC6Me1xNMzMhqmGdIraChhDz8ysXHyFMzMzK0GmM8vqze0FCaXZi/7Kpf/5BOlUDT+4aAqnHrpP97raGrHXiHonlMzMhinhXkpmNvT5KmdmZrYTWzOdrN+ybUDubAQzHnqeHz/yEsceMIavvPfN7DGirnv7htoUoxo9fpKZ2XDWUJci5YkZzGyIc1LJzMxsJ9o6st0Jpc1bM1x77yIefvZ1zj1mfz535mGk8x5tqJEY3ZQenEDNzKwiCGj2WHpmNgz4SmdmZlaiFetaueL2ebz4+hY+e8ahvH/K+G3jJwGjGtP4prSZmTXV11LjBsHMhgEnlczMzHpxz5OvcuPsJaxY18oeI9K0tndSm6rhmxcczUkT9ureLlUjxjSmPRirmZkhwYg6j6dnZsODk0pmZmY9uOfJV7n6rgW0dnQCsGZzBwI+ecrBBQmlulQNoxvTviNtZmYAjKjzmHpmNnz4lqqZmVkPbpy9pDuh1CWAX8xd3r3cWJdijxF1TiiZmZVA0jRJSyQtlXRVD+tHS7pX0jxJiyRdnLfuVkmrJC0s2mdPSQ9Kei75d4+8dVcn77VE0pnlrV1OjUSTeymZ2TDipJKZmVkPVqxr7bH8tQ1tufGTGtKMavCA3GZmpZCUAm4GzgImARdKmlS02WXA4og4GpgKfF1S19SaM4FpPRz6KuC3ETER+G2yTHLsC4Ajk/2+m8RQVs317qVkZsOLk0pmZmY92H9MY4/lY0c1MKapjkbfiTYz64sTgaURsSwi2oHbgHOLtglgpHJZmWZgDZABiIiHk+Vi5wI/Tl7/GJieV35bRGyNiBeApUkMZZOqkdsGMxt2nFQyMzPrwefOPIzGdOGXg4Z0DVeeeRh1tW4+zcz6aBzwSt7y8qQs303AEcAKYAHw6YjI7uS4YyNiJUDy7759eL9+1Vzv4WrNbPjxlc/MzKwH04/Nfffomv3tDaMbuPLMwzjvuPGDHJmZWVXq6ZmwKFo+E3gKOA04BHhQ0h8iYkOZ3g9JlwCXAIwdO5aWlpZdeCvIRlCzG4+9bdq0aZffu5oMh3oOhzrC8Kin61gaJ5XMzMx6Mf3YcUw/dhwdnVnSKfdOMjPbDcuBA/KWx5PrkZTvYuD6iAhgqaQXgMOBv+zguK9J2i8iVkraD1jVh/cjIm4BbgGYMmVKTJ06tfQa5clmY7cmbWhpaWFX37uaDId6Doc6wvCop+tYGv+FbGZmthNOKJmZ7bY5wERJE5LBty8AZhVt8zJwOoCkscBhwLKdHHcW8OHk9YeBX+aVXyCpXtIEYCI7Tk7tFs8CambDlf9KNjMzMzOzsoqIDHA5MBt4GvhFRCySdKmkS5PNvgT8naQF5GZy+3xEvA4g6efAo8BhkpZL+liyz/XAGZKeA85IlomIRcAvgMXAr4HLIqJzIOpqZjac+PE3MzMzMzMru4i4H7i/qGxG3usVwDt72ffCXspXk/Ru6mHdl4Ev72q8Zma2c+6pZGZmZmZmZmZmfeakkpmZmZmZmZmZ9ZmTSmZmZmZmZmZm1mdOKpmZmZmZmZmZWZ85qWRmZmZmZmZmZn1W1qSSpGmSlkhaKumqHtZ/TtJTyc9CSZ2S9ixlXzMzMzMzMzMzGzxlSypJSgE3A2cBk4ALJU3K3yYiboyIYyLiGOBq4KGIWFPKvmZmZmZmZmZmNnjK2VPpRGBpRCyLiHbgNuDcHWx/IfDzXdzXzMzMzMzMzMwGUDmTSuOAV/KWlydl25HUBEwD7uzrvmZmZmZmZmZmNvBqy3hs9VAWvWz7HuBPEbGmr/tKugS4JFncJGlJn6Lsu72B18v8Hv2lmmKF6orXsZZPNcVbTbG+cbADGGyPP/7465JeGoC3qqbPhWMtn2qKt5piheqKt5pidTsxcO1ET6rps7I7hkM9h0MdYXjU03Us1GM7Uc6k0nLggLzl8cCKXra9gG2PvvVp34i4Bbhl18PsG0lzI2LKQL3f7qimWKG64nWs5VNN8VZTrAYRsc9AvE81fS4ca/lUU7zVFCtUV7zVFKsNXDvRk+HyWRkO9RwOdYThUU/XsTTlfPxtDjBR0gRJdeQSR7OKN5I0Gngb8Mu+7mtmZmZmZmZmZoOjbD2VIiIj6XJgNpACbo2IRZIuTdbPSDY9D3ggIjbvbN9yxWpmZmZmZmZmZn1TzsffiIj7gfuLymYULc8EZpayb4UYsEft+kE1xQrVFa9jLZ9qireaYrWBU02fC8daPtUUbzXFCtUVbzXFaoNruHxWhkM9h0MdYXjU03UsgSJ6GzvbzMzMzMzMzMysZ+UcU8nMzMzMzMzMzIaoYZ9UknSApN9LelrSIkmfTsqvlfSqpKeSn7Pz9rla0lJJSySdmVd+vKQFybrvSFIZ4n0xeY+nJM1NyvaU9KCk55J/96iQWA/LO39PSdog6TOVcm4l3SpplaSFeWX9di4l1Uv676T8z5IO6udYb5T0jKT5ku6WNCYpP0hSa975nZG3T9lj3UG8/fZ7H4Bz+995cb4o6amkfNDPrQ08uZ0oS6yq8DYiOa7biTJdy3qJ1+2E24khT9K05HO8VNJVPaz/YPJ/dr6kRyQdPRhx7o6d1TFvuxMkdUo6fyDj6y+l1FPS1ORasEjSQwMd4+4q4fM6WtK9kuYldbx4MOLcHT1d44vWK7lmL03+Xx430DHurhLquHvXnYgY1j/AfsBxyeuRwLPAJOBa4Ioetp8EzAPqgQnA80AqWfcX4K2AgP8BzipDvC8CexeV3QBclby+CvhqJcRaFGMK+Cvwxko5t8CpwHHAwnKcS+ATwIzk9QXAf/dzrO8EapPXX82L9aD87YqOU/ZYdxBvv/3ey31ui9Z/HfjXSjm3/hn4H9xOlL2doALbiOS4bifcTvQYa9F6txP+KfWzlEo+vwcDdcnnelLRNn8H7JG8Pgv482DH3d91zNvud+TG0D1/sOMu0+9yDLAYODBZ3new4y5DHb+Q17bsA6wB6gY79j7Wc2fX+LOTa7aAt1Tb/8kS67hb151h31MpIlZGxBPJ643A08C4HexyLnBbRGyNiBeApcCJkvYDRkXEo5H7bfwEmF7e6Ati+nHy+sd571tJsZ4OPB8RL+1gmwGNNyIeJnfhK46hv85l/rHuAE7vuivZH7FGxAMRkUkWHwPG7+gYAxVrb/HuQMWd2y7JMf8B+PmOjjGQ59YGntuJAYm14toIcDtRrlh7i3cHKu7cdnE7YX10IrA0IpZFRDtwG7nff7eIeCQi1iaLO/1/W4F2WsfEJ4E7gVUDGVw/KqWeHwDuioiXASKi2upaSh0DGJlcs5rJXSszVJES2qNzgZ9EzmPAmOSaXjV2Vsfdve4M+6RSvqS78bHAn5Oiy5MuYLdqW/f2ccArebstT8rGJa+Ly/tbAA9IelzSJUnZ2IhYCbkvP8C+FRJrvgso/IOrEs8t9O+57N4n+aN+PbBXmeL+KLkMepcJkp6U9JCkU/LiGexY++v3PlDxngK8FhHP5ZVV6rm1AeB2omyqpY0AtxNuJwq5nbC+6O2z3JuPUfj/thrstI6SxgHnAQWzgleZUn6XhwJ7SGpJ2uSLBiy6/lFKHW8CjgBWAAuAT0dEdmDCGzB9/X9b7fp83XFSKSGpmVy2/DMRsQH4HnAIcAywklzXZsh1eysWOyjvbydHxHHkuqVdJunUHWw72LHmgpDqgHOA25OiSj23O7IrsQ1I3JKuIXdH4KdJ0Upy3WyPBf438DNJoyog1v78vQ/UZ+JCCr/oVuq5tQHgdqI8n9sh0kZABV/L3E5st64/uZ2wvij5dy3p7eS+3H2+rBH1v1Lq+C3g8xHRWf5wyqaUetYCxwPvAs4E/l9Jh5Y7sH5USh3PBJ4C9id37b4pueYNJcPmGr2r1x0nlQBJaXJfFH4aEXcBRMRrEdGZZFp/QK77H+Qykwfk7T6eXGZ2OYXdxLrK+1VErEj+XQXcncT1WlcXvOTfrq6VgxprnrOAJyLitST2ijy3if48l937SKoFRlN6V/+SSPow8G7gg0l3epLHA1Ynrx8n9yz0oYMdaz//3gfi3NYC7wX+O68OFXlurfzcTpT1ultNbQS4nXA7kXA7Ybugt89yAUmTgR8C53Z9nqpIKXWcAtwm6UXgfOC7kqYPSHT9p5R6Lgd+HRGbI+J14GHg6AGKrz+UUseLyT3iFxGxFHgBOHyA4hsoJf2/rXa7c90Z9kml5PnPHwFPR8Q38srzn5M8D+gaKX0WcIFyM3VMACYCf0m6wG+U9JbkmBcBv+znWEdIGtn1mtwAnAuTmD6cbPbhvPcdtFiLFNzFq8Rzm6c/z2X+sc4Hftf1B31/kDSNXBb5nIjYkle+j6RU8vrgJNZlgxlrEkt//t7LHi/wDuCZiOh+XKFSz62Vl9uJsl93q6mN6IrD7YTbCXA7YX03B5goaULSS/MCcr//bpIOBO4CPhQRzw5CjLtrp3WMiAkRcVBEHERuHLFPRMQ9Ax7p7tlpPcn9Hz9FUq2kJuAkcuMyVotS6vgyuXERkTQWOAxYNqBRlt8s4CLlvAVY3/UY/FCx29edqIDRyAfzB/h7ct3X5pPruvcUuRHe/5Pcc6HzyX2Q9svb5xpyd56WkDfDDLms+8Jk3U2A+jnWg8mNuj8PWARck5TvBfwWeC75d8/BjjXvfZqA1cDovLKKOLfkvsSsBDrIZaA/1p/nEmgg9zjHUnIzvhzcz7EuJfd8b9fntmvmmPcln495wBPAewYy1h3E22+/93Kf26R8JnBp0baDfm79M/A/uJ0oWztBBbcRyXHdTrid6DHWpHwmbif80/fP09nkZhF9nm3X6Eu7Pkvkegqszft/O3ewY+7vOhZtO5MqnP2t1HoCnyM3A9xCco/PD3rc/VlHco+9PZBcuxcC/89gx7wLdeypPcqvo4Cbk3OwAJgy2DGXoY67dd3paszMzMzMzMzMzMxKNuwffzMzMzMzMzMzs75zUsnMzMzMzMzMzPrMSSUzMzMzMzMzM+szJ5XMzMzMzMzMzKzPnFQyMzMzMzMzM7M+c1LJKp6kvSQ9lfz8VdKrect1O9l3iqTvlPAej/RfxINP0kck3TTYcZiZDQS3E33ndsLMzMz6g5NKVvEiYnVEHBMRxwAzgG92LUdEu6TaHew7NyI+VcJ7/F0/hmxmZgPI7YSZmQ02SZ+S9LSktZKuSsqmS5q0k/0+Imn/vOUf7mwfs0ripJJVJUkzJX1D0u+Br0o6UdIjkp5M/j0s2W6qpPuS19dKulVSi6Rlkj6Vd7xNedu3SLpD0jOSfipJybqzk7I/SvpO13GL4kpJulHSHEnzJf1zUv6/Jd2avH6zpIWSmnYQ90ck3SPpXkkvSLo8OcaTkh6TtGeyXYukbyX7LpR0Yg8x7SPpziSmOZJOTsrflncn/0lJI/v1l2RmNojcTridMDMbYJ8Azo6IPSLi+qRsOrCzBNFHgO6kUkT8U0QsLkuEZmXgpJJVs0OBd0TEZ4FngFMj4ljgX4F/72Wfw4EzgROBL0pK97DNscBnyDUABwMnS2oAvg+cFRF/D+zTy/E/BqyPiBOAE4CPS5oAfAt4k6TzgP8A/jkituwk7qOADySxfhnYkmz3KHBR3nYjkjvonwBu7SGmb5O7a38C8D7gh0n5FcBlyZ39U4DWXupkZlat3E7kuJ0wMysjSTPItQezJP2LpJsk/R1wDnBjkpw/pIf9zgemAD9NtmlMbgZMSdZvkvRVSY9L+k1yo6Hrxsc5yTa93azYT9LDyXEXSjploM6HDS+9dgc3qwK3R0Rn8no08GNJE4EAevoSAPCriNgKbJW0ChgLLC/a5i8RsRxA0lPAQcAmYFlEvJBs83Pgkh6O/05gctJAdMU1MSJekPQRYD7w/Yj4Uwlx/z4iNgIbJa0H7k3KFwCT87b7OUBEPCxplKQxRTG9A5iU3EgHGJXcbf4T8A1JPwXu6qqzmdkQ4nZiWyxuJ8zMyiQiLpU0DXg78O6k7BFJs4D7IuKOXva7Q9LlwBURMRcg71oMMAJoiYjPS7obuA44g9xNjR8Ds8i7WSGpHviTpAeA9wKzI+LLklJAU//X3MxJJatum/Nef4ncH9fnSToIaOlln615rzvp+f9AT9uoh+16IuCTETG7h3UTyX3p2D+vbEdx58eRzVvOFsUdRe9TvFwDvDUiiu8wXy/pV8DZwGOS3hERz/RYKzOz6uR2IsfthJlZdWoHfp28XgBsjYgOSQvI3dCAXm5WAHOAW5Met/dExFMDFrUNK378zYaK0cCryeuPlOH4zwAHJ3/QA/xjL9vNBv5X1+MSkg6VNELSaHKPF5wK7FV00d/duP8xea+/J3eXYn3R+geAy7sWJB2T/HtIRCyIiK8Cc8k98mFmNlS5nXA7YWZWbToioutGQPfNg4jIv3nQdbOia4KKCRHxQEQ8TK5NeRX4T0kXFR/crD84qWRDxQ3AVyT9CUj198GTu7efAH4t6Y/Aa0DxH+WQG4diMfCEpIXkxteoBb4JfDciniXXRfV6Sfv2U9xrlZvqekZy7GKfAqYkz1gvBi5Nyj+TPF89j9w4Gf+zi+9vZlYN3E64nTAzG2gbgZ1NclDKNjvS282KNwKrIuIHwI+A43bjPcx6pW2JTzPbEUnNEbFJuQedbwaei4hvDnJMLeQ9g21mZoPH7YSZ2fAl6UVyg26/G5gSEZcrN5vmD8j1MDo/Ip7vYb/3kZuEoRV4K7kE/hURMVfSpohoTra7FtgUEV9LljdFRLOkGnJjLb2HXK+lv5GbdW468Dmgg9yj1Rfljftn1m+cVDIrkaR/AT4M1AFPAh9PZuYZzJha8JcFM7OK4HbCzMzMhhsnlczMzMzMzMzMrM88+5uZmZmZmZlZGUm6GTi5qPjbEfEfgxGPWX9xTyUzMzMzMzMzM+szz/5mZmZmZmZmZmZ95qSSmZmZmZmZmZn1mZNKZmZmZmZmZmbWZ04qmZmZmZmZmZlZnzmpZGZmZmZmZmZmffb/A9t/yi8dQAqHAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "title = \"Learning Curves\"\n",
    "# Cross validation with 5 iterations to get smoother mean test and train\n",
    "# score curves, each time with 20% data randomly selected as a validation set.\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "fig, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
    "\n",
    "estimator = AdaBoostClassifier(learning_rate = 0.6)\n",
    "plot_learning_curve( estimator,  title, X, y, axes=axes[ :], ylim=(0.7, 1.01), cv=cv,  n_jobs=4, scoring=\"accuracy\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a73ac46",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07896638",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "184b1948",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
